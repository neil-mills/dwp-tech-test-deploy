!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=21)}([function(e,t,n){"use strict";n.d(t,"c",(function(){return i})),n.d(t,"a",(function(){return o})),n.d(t,"e",(function(){return a})),n.d(t,"b",(function(){return s})),n.d(t,"d",(function(){return u})),n.d(t,"f",(function(){return c}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function i(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}function s(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))}function u(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function c(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return L})),n.d(t,"b",(function(){return p})),n.d(t,"c",(function(){return S})),n.d(t,"d",(function(){return V})),n.d(t,"e",(function(){return U})),n.d(t,"f",(function(){return Y})),n.d(t,"g",(function(){return D})),n.d(t,"h",(function(){return A})),n.d(t,"i",(function(){return O})),n.d(t,"j",(function(){return I})),n.d(t,"k",(function(){return w})),n.d(t,"l",(function(){return R})),n.d(t,"m",(function(){return j})),n.d(t,"n",(function(){return x})),n.d(t,"o",(function(){return N})),n.d(t,"p",(function(){return f})),n.d(t,"q",(function(){return X})),n.d(t,"r",(function(){return E})),n.d(t,"s",(function(){return k})),n.d(t,"t",(function(){return h})),n.d(t,"u",(function(){return y})),n.d(t,"v",(function(){return v})),n.d(t,"w",(function(){return m})),n.d(t,"x",(function(){return z})),n.d(t,"y",(function(){return W})),n.d(t,"z",(function(){return $})),n.d(t,"A",(function(){return ee})),n.d(t,"B",(function(){return te})),n.d(t,"C",(function(){return B})),n.d(t,"D",(function(){return K})),n.d(t,"E",(function(){return d})),n.d(t,"F",(function(){return g})),n.d(t,"G",(function(){return c})),n.d(t,"H",(function(){return b})),n.d(t,"I",(function(){return H}));var r=n(3),i=n(2),o=n(0),a=n(19),s=n.n(a);n(7);function u(e,t,n,r){if(function(e){return"IntValue"===e.kind}(n)||function(e){return"FloatValue"===e.kind}(n))e[t.value]=Number(n.value);else if(function(e){return"BooleanValue"===e.kind}(n)||function(e){return"StringValue"===e.kind}(n))e[t.value]=n.value;else if(function(e){return"ObjectValue"===e.kind}(n)){var o={};n.fields.map((function(e){return u(o,e.name,e.value,r)})),e[t.value]=o}else if(function(e){return"Variable"===e.kind}(n)){var a=(r||{})[n.name.value];e[t.value]=a}else if(function(e){return"ListValue"===e.kind}(n))e[t.value]=n.values.map((function(e){var n={};return u(n,t,e,r),n[t.value]}));else if(function(e){return"EnumValue"===e.kind}(n))e[t.value]=n.value;else{if(!function(e){return"NullValue"===e.kind}(n))throw new i.a(17);e[t.value]=null}}function c(e,t){var n=null;e.directives&&(n={},e.directives.forEach((function(e){n[e.name.value]={},e.arguments&&e.arguments.forEach((function(r){var i=r.name,o=r.value;return u(n[e.name.value],i,o,t)}))})));var r=null;return e.arguments&&e.arguments.length&&(r={},e.arguments.forEach((function(e){var n=e.name,i=e.value;return u(r,n,i,t)}))),f(e.name.value,r,n)}var l=["connection","include","skip","client","rest","export"];function f(e,t,n){if(n&&n.connection&&n.connection.key){if(n.connection.filter&&n.connection.filter.length>0){var r=n.connection.filter?n.connection.filter:[];r.sort();var i=t,o={};return r.forEach((function(e){o[e]=i[e]})),n.connection.key+"("+JSON.stringify(o)+")"}return n.connection.key}var a=e;if(t){var u=s()(t);a+="("+u+")"}return n&&Object.keys(n).forEach((function(e){-1===l.indexOf(e)&&(n[e]&&Object.keys(n[e]).length?a+="@"+e+"("+JSON.stringify(n[e])+")":a+="@"+e)})),a}function p(e,t){if(e.arguments&&e.arguments.length){var n={};return e.arguments.forEach((function(e){var r=e.name,i=e.value;return u(n,r,i,t)})),n}return null}function d(e){return e.alias?e.alias.value:e.name.value}function h(e){return"Field"===e.kind}function v(e){return"InlineFragment"===e.kind}function y(e){return e&&"id"===e.type&&"boolean"==typeof e.generated}function b(e,t){return void 0===t&&(t=!1),Object(o.a)({type:"id",generated:t},"string"==typeof e?{id:e,typename:void 0}:e)}function m(e){return null!=e&&"object"==typeof e&&"json"===e.type}function O(e,t){if(e.directives&&e.directives.length){var n={};return e.directives.forEach((function(e){n[e.name.value]=p(e,t)})),n}return null}function g(e,t){return void 0===t&&(t={}),(n=e.directives,n?n.filter(T).map((function(e){var t=e.arguments;e.name.value,Object(i.b)(t&&1===t.length,14);var n=t[0];Object(i.b)(n.name&&"if"===n.name.value,15);var r=n.value;return Object(i.b)(r&&("Variable"===r.kind||"BooleanValue"===r.kind),16),{directive:e,ifArgument:n}})):[]).every((function(e){var n=e.directive,r=e.ifArgument,o=!1;return"Variable"===r.value.kind?(o=t[r.value.name.value],Object(i.b)(void 0!==o,13)):o=r.value.value,"skip"===n.name.value?!o:o}));var n}function k(e,t){return function(e){var t=[];return Object(r.visit)(e,{Directive:function(e){t.push(e.name.value)}}),t}(t).some((function(t){return e.indexOf(t)>-1}))}function E(e){return e&&k(["client"],e)&&k(["export"],e)}function T(e){var t=e.name.value;return"skip"===t||"include"===t}function w(e,t){var n=t,r=[];return e.definitions.forEach((function(e){if("OperationDefinition"===e.kind)throw new i.a(11);"FragmentDefinition"===e.kind&&r.push(e)})),void 0===n&&(Object(i.b)(1===r.length,12),n=r[0].name.value),Object(o.a)(Object(o.a)({},e),{definitions:Object(o.f)([{kind:"OperationDefinition",operation:"query",selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:n}}]}}],e.definitions)})}function S(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.forEach((function(t){null!=t&&Object.keys(t).forEach((function(n){e[n]=t[n]}))})),e}function _(e){Object(i.b)(e&&"Document"===e.kind,2);var t=e.definitions.filter((function(e){return"FragmentDefinition"!==e.kind})).map((function(e){if("OperationDefinition"!==e.kind)throw new i.a(3);return e}));return Object(i.b)(t.length<=1,4),e}function j(e){return _(e),e.definitions.filter((function(e){return"OperationDefinition"===e.kind}))[0]}function x(e){return e.definitions.filter((function(e){return"OperationDefinition"===e.kind&&e.name})).map((function(e){return e.name.value}))[0]||null}function I(e){return e.definitions.filter((function(e){return"FragmentDefinition"===e.kind}))}function N(e){var t=j(e);return Object(i.b)(t&&"query"===t.operation,6),t}function R(e){var t;_(e);for(var n=0,r=e.definitions;n<r.length;n++){var o=r[n];if("OperationDefinition"===o.kind){var a=o.operation;if("query"===a||"mutation"===a||"subscription"===a)return o}"FragmentDefinition"!==o.kind||t||(t=o)}if(t)return t;throw new i.a(10)}function D(e){void 0===e&&(e=[]);var t={};return e.forEach((function(e){t[e.name.value]=e})),t}function A(e){if(e&&e.variableDefinitions&&e.variableDefinitions.length){var t=e.variableDefinitions.filter((function(e){return e.defaultValue})).map((function(e){var t=e.variable,n=e.defaultValue,r={};return u(r,t.name,n),r}));return S.apply(void 0,Object(o.f)([{}],t))}return{}}function C(e,t,n){var r=0;return e.forEach((function(n,i){t.call(this,n,i,e)&&(e[r++]=n)}),n),e.length=r,e}var F={kind:"Field",name:{kind:"Name",value:"__typename"}};function Q(e){return function e(t,n){return t.selectionSet.selections.every((function(t){return"FragmentSpread"===t.kind&&e(n[t.name.value],n)}))}(j(e)||function(e){Object(i.b)("Document"===e.kind,7),Object(i.b)(e.definitions.length<=1,8);var t=e.definitions[0];return Object(i.b)("FragmentDefinition"===t.kind,9),t}(e),D(I(e)))?null:e}function M(e){return function(t){return e.some((function(e){return e.name&&e.name===t.name.value||e.test&&e.test(t)}))}}function P(e,t){var n=Object.create(null),i=[],a=Object.create(null),s=[],u=Q(Object(r.visit)(t,{Variable:{enter:function(e,t,r){"VariableDefinition"!==r.kind&&(n[e.name.value]=!0)}},Field:{enter:function(t){if(e&&t.directives&&(e.some((function(e){return e.remove}))&&t.directives&&t.directives.some(M(e))))return t.arguments&&t.arguments.forEach((function(e){"Variable"===e.value.kind&&i.push({name:e.value.name.value})})),t.selectionSet&&function e(t){var n=[];return t.selections.forEach((function(t){(h(t)||v(t))&&t.selectionSet?e(t.selectionSet).forEach((function(e){return n.push(e)})):"FragmentSpread"===t.kind&&n.push(t)})),n}(t.selectionSet).forEach((function(e){s.push({name:e.name.value})})),null}},FragmentSpread:{enter:function(e){a[e.name.value]=!0}},Directive:{enter:function(t){if(M(e)(t))return null}}}));return u&&C(i,(function(e){return!n[e.name]})).length&&(u=function(e,t){var n=function(e){return function(t){return e.some((function(e){return t.value&&"Variable"===t.value.kind&&t.value.name&&(e.name===t.value.name.value||e.test&&e.test(t))}))}}(e);return Q(Object(r.visit)(t,{OperationDefinition:{enter:function(t){return Object(o.a)(Object(o.a)({},t),{variableDefinitions:t.variableDefinitions.filter((function(t){return!e.some((function(e){return e.name===t.variable.name.value}))}))})}},Field:{enter:function(t){if(e.some((function(e){return e.remove}))){var r=0;if(t.arguments.forEach((function(e){n(e)&&(r+=1)})),1===r)return null}}},Argument:{enter:function(e){if(n(e))return null}}}))}(i,u)),u&&C(s,(function(e){return!a[e.name]})).length&&(u=function(e,t){function n(t){if(e.some((function(e){return e.name===t.name.value})))return null}return Q(Object(r.visit)(t,{FragmentSpread:{enter:n},FragmentDefinition:{enter:n}}))}(s,u)),u}function L(e){return Object(r.visit)(_(e),{SelectionSet:{enter:function(e,t,n){if(!n||"OperationDefinition"!==n.kind){var r=e.selections;if(r)if(!r.some((function(e){return h(e)&&("__typename"===e.name.value||0===e.name.value.lastIndexOf("__",0))}))){var i=n;if(!(h(i)&&i.directives&&i.directives.some((function(e){return"export"===e.name.value}))))return Object(o.a)(Object(o.a)({},e),{selections:Object(o.f)(r,[F])})}}}}})}var q={test:function(e){var t="connection"===e.name.value;return t&&(!e.arguments||e.arguments.some((function(e){return"key"===e.name.value}))),t}};function K(e){return P([q],_(e))}function V(e){return"query"===R(e).operation?e:Object(r.visit)(e,{OperationDefinition:{enter:function(e){return Object(o.a)(Object(o.a)({},e),{operation:"query"})}}})}function B(e){_(e);var t=P([{test:function(e){return"client"===e.name.value},remove:!0}],e);return t&&(t=Object(r.visit)(t,{FragmentDefinition:{enter:function(e){if(e.selectionSet&&e.selectionSet.selections.every((function(e){return h(e)&&"__typename"===e.name.value})))return null}}})),t}var U="function"==typeof WeakMap&&!("object"==typeof navigator&&"ReactNative"===navigator.product),G=Object.prototype.toString;function Y(e){return function e(t,n){switch(G.call(t)){case"[object Array]":if(n.has(t))return n.get(t);var r=t.slice(0);return n.set(t,r),r.forEach((function(t,i){r[i]=e(t,n)})),r;case"[object Object]":if(n.has(t))return n.get(t);var i=Object.create(Object.getPrototypeOf(t));return n.set(t,i),Object.keys(t).forEach((function(r){i[r]=e(t[r],n)})),i;default:return t}}(e,new Map)}function J(t){return(void 0!==e?"production":"development")===t}function z(){return!0===J("production")}function W(){return!0===J("test")}function H(e){try{return e()}catch(e){console.error&&console.error(e)}}function X(e){return e.errors&&e.errors.length}function $(e){if((!0===J("development")||W())&&!("function"==typeof Symbol&&"string"==typeof Symbol("")))return function e(t){return Object.freeze(t),Object.getOwnPropertyNames(t).forEach((function(n){null===t[n]||"object"!=typeof t[n]&&"function"!=typeof t[n]||Object.isFrozen(t[n])||e(t[n])})),t}(e);return e}var Z=Object.prototype.hasOwnProperty;function ee(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return te(e)}function te(e){var t=e[0]||{},n=e.length;if(n>1){var r=[];t=ie(t,r);for(var i=1;i<n;++i)t=re(t,e[i],r)}return t}function ne(e){return null!==e&&"object"==typeof e}function re(e,t,n){return ne(t)&&ne(e)?(Object.isExtensible&&!Object.isExtensible(e)&&(e=ie(e,n)),Object.keys(t).forEach((function(r){var i=t[r];if(Z.call(e,r)){var o=e[r];i!==o&&(e[r]=re(ie(o,n),i,n))}else e[r]=i})),e):t}function ie(e,t){return null!==e&&"object"==typeof e&&t.indexOf(e)<0&&(e=Array.isArray(e)?e.slice(0):Object(o.a)({__proto__:Object.getPrototypeOf(e)},e),t.push(e)),e}Object.create({})}).call(this,n(6))},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return s}));var r=n(0),i=Object.setPrototypeOf,o=void 0===i?function(e,t){return e.__proto__=t,e}:i,a=function(e){function t(n){void 0===n&&(n="Invariant Violation");var r=e.call(this,"number"==typeof n?"Invariant Violation: "+n+" (see https://github.com/apollographql/invariant-packages)":n)||this;return r.framesToPop=1,r.name="Invariant Violation",o(r,t.prototype),r}return Object(r.c)(t,e),t}(Error);function s(e,t){if(!e)throw new a(t)}function u(e){return function(){return console[e].apply(console,arguments)}}!function(e){e.warn=u("warn"),e.error=u("error")}(s||(s={}));var c={env:{}};if("object"==typeof e)c=e;else try{Function("stub","process = stub")(c)}catch(e){}}).call(this,n(6))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.visit=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a,r=void 0,c=Array.isArray(e),l=[e],f=-1,p=[],d=void 0,h=void 0,v=void 0,y=[],b=[],m=e;do{var O=++f===l.length,g=O&&0!==p.length;if(O){if(h=0===b.length?void 0:y[y.length-1],d=v,v=b.pop(),g){if(c)d=d.slice();else{for(var k={},E=0,T=Object.keys(d);E<T.length;E++){var w=T[E];k[w]=d[w]}d=k}for(var S=0,_=0;_<p.length;_++){var j=p[_][0],x=p[_][1];c&&(j-=S),c&&null===x?(d.splice(j,1),S++):d[j]=x}}f=r.index,l=r.keys,p=r.edits,c=r.inArray,r=r.prev}else{if(h=v?c?f:l[f]:void 0,null==(d=v?v[h]:m))continue;v&&y.push(h)}var I,N=void 0;if(!Array.isArray(d)){if(!(0,o.isNode)(d))throw new Error("Invalid AST Node: ".concat((0,i.default)(d),"."));var R=u(t,d.kind,O);if(R){if((N=R.call(t,d,h,v,y,b))===s)break;if(!1===N){if(!O){y.pop();continue}}else if(void 0!==N&&(p.push([h,N]),!O)){if(!(0,o.isNode)(N)){y.pop();continue}d=N}}}if(void 0===N&&g&&p.push([h,d]),O)y.pop();else r={inArray:c,index:f,keys:l,edits:p,prev:r},c=Array.isArray(d),l=c?d:null!==(I=n[d.kind])&&void 0!==I?I:[],f=-1,p=[],v&&b.push(v),v=d}while(void 0!==r);0!==p.length&&(m=p[p.length-1][1]);return m},t.visitInParallel=function(e){var t=new Array(e.length);return{enter:function(n){for(var r=0;r<e.length;r++)if(null==t[r]){var i=u(e[r],n.kind,!1);if(i){var o=i.apply(e[r],arguments);if(!1===o)t[r]=n;else if(o===s)t[r]=s;else if(void 0!==o)return o}}},leave:function(n){for(var r=0;r<e.length;r++)if(null==t[r]){var i=u(e[r],n.kind,!0);if(i){var o=i.apply(e[r],arguments);if(o===s)t[r]=s;else if(void 0!==o&&!1!==o)return o}}else t[r]===n&&(t[r]=null)}}},t.getVisitFn=u,t.BREAK=t.QueryDocumentKeys=void 0;var r,i=(r=n(8))&&r.__esModule?r:{default:r},o=n(4);var a={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]};t.QueryDocumentKeys=a;var s=Object.freeze({});function u(e,t,n){var r=e[t];if(r){if(!n&&"function"==typeof r)return r;var i=n?r.leave:r.enter;if("function"==typeof i)return i}else{var o=n?e.leave:e.enter;if(o){if("function"==typeof o)return o;var a=o[t];if("function"==typeof a)return a}}}t.BREAK=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNode=function(e){return null!=e&&"string"==typeof e.kind},t.Token=t.Location=void 0;var r,i=(r=n(26))&&r.__esModule?r:{default:r};var o=function(){function e(e,t,n){this.start=e.start,this.end=t.end,this.startToken=e,this.endToken=t,this.source=n}return e.prototype.toJSON=function(){return{start:this.start,end:this.end}},e}();t.Location=o,(0,i.default)(o);var a=function(){function e(e,t,n,r,i,o,a){this.kind=e,this.start=t,this.end=n,this.line=r,this.column=i,this.value=a,this.prev=o,this.next=null}return e.prototype.toJSON=function(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}},e}();t.Token=a,(0,i.default)(a)},function(e,t,n){var r=n(28).parse;function i(e){return e.replace(/[\s,]+/g," ").trim()}var o={},a={};var s=!0;var u=!1;function c(e){var t=i(e);if(o[t])return o[t];var n=r(e,{experimentalFragmentVariables:u});if(!n||"Document"!==n.kind)throw new Error("Not a valid GraphQL document.");return n=function e(t,n){var r=Object.prototype.toString.call(t);if("[object Array]"===r)return t.map((function(t){return e(t,n)}));if("[object Object]"!==r)throw new Error("Unexpected input.");n&&t.loc&&delete t.loc,t.loc&&(delete t.loc.startToken,delete t.loc.endToken);var i,o,a,s=Object.keys(t);for(i in s)s.hasOwnProperty(i)&&(o=t[s[i]],"[object Object]"!==(a=Object.prototype.toString.call(o))&&"[object Array]"!==a||(t[s[i]]=e(o,!0)));return t}(n=function(e){for(var t,n={},r=[],o=0;o<e.definitions.length;o++){var u=e.definitions[o];if("FragmentDefinition"===u.kind){var c=u.name.value,l=i((t=u.loc).source.body.substring(t.start,t.end));a.hasOwnProperty(c)&&!a[c][l]?(s&&console.warn("Warning: fragment with name "+c+" already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names"),a[c][l]=!0):a.hasOwnProperty(c)||(a[c]={},a[c][l]=!0),n[l]||(n[l]=!0,r.push(u))}else r.push(u)}return e.definitions=r,e}(n),!1),o[t]=n,n}function l(){for(var e=Array.prototype.slice.call(arguments),t=e[0],n="string"==typeof t?t:t[0],r=1;r<e.length;r++)e[r]&&e[r].kind&&"Document"===e[r].kind?n+=e[r].loc.source.body:n+=e[r],n+=t[r];return c(n)}l.default=l,l.resetCaches=function(){o={},a={}},l.disableFragmentWarnings=function(){s=!1},l.enableExperimentalFragmentVariables=function(){u=!0},l.disableExperimentalFragmentVariables=function(){u=!1},e.exports=l},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,c=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!l){var e=s(p);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||l||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var r=Object.prototype,i=r.toString,o=r.hasOwnProperty,a=new Map;function s(e,t){try{return function e(t,n){if(t===n)return!0;var r=i.call(t),a=i.call(n);if(r!==a)return!1;switch(r){case"[object Array]":if(t.length!==n.length)return!1;case"[object Object]":if(u(t,n))return!0;var s=Object.keys(t),c=Object.keys(n),l=s.length;if(l!==c.length)return!1;for(var f=0;f<l;++f)if(!o.call(n,s[f]))return!1;for(f=0;f<l;++f){var p=s[f];if(!e(t[p],n[p]))return!1}return!0;case"[object Error]":return t.name===n.name&&t.message===n.message;case"[object Number]":if(t!=t)return n!=n;case"[object Boolean]":case"[object Date]":return+t==+n;case"[object RegExp]":case"[object String]":return t==""+n;case"[object Map]":case"[object Set]":if(t.size!==n.size)return!1;if(u(t,n))return!0;for(var d=t.entries(),h="[object Map]"===r;;){var v=d.next();if(v.done)break;var y=v.value,b=y[0],m=y[1];if(!n.has(b))return!1;if(h&&!e(m,n.get(b)))return!1}return!0}return!1}(e,t)}finally{a.clear()}}function u(e,t){var n=a.get(e);if(n){if(n.has(t))return!0}else a.set(e,n=new Set);return n.add(t),!1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return a(e,[])};var r,i=(r=n(9))&&r.__esModule?r:{default:r};function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){switch(o(e)){case"string":return JSON.stringify(e);case"function":return e.name?"[function ".concat(e.name,"]"):"[function]";case"object":return null===e?"null":function(e,t){if(-1!==t.indexOf(e))return"[Circular]";var n=[].concat(t,[e]),r=function(e){var t=e[String(i.default)];if("function"==typeof t)return t;if("function"==typeof e.inspect)return e.inspect}(e);if(void 0!==r){var o=r.call(e);if(o!==e)return"string"==typeof o?o:a(o,n)}else if(Array.isArray(e))return function(e,t){if(0===e.length)return"[]";if(t.length>2)return"[Array]";for(var n=Math.min(10,e.length),r=e.length-n,i=[],o=0;o<n;++o)i.push(a(e[o],t));1===r?i.push("... 1 more item"):r>1&&i.push("... ".concat(r," more items"));return"["+i.join(", ")+"]"}(e,n);return function(e,t){var n=Object.keys(e);if(0===n.length)return"{}";if(t.length>2)return"["+function(e){var t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===t&&"function"==typeof e.constructor){var n=e.constructor.name;if("string"==typeof n&&""!==n)return n}return t}(e)+"]";return"{ "+n.map((function(n){return n+": "+a(e[n],t)})).join(", ")+" }"}(e,n)}(e,t);default:return String(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):void 0;t.default=r},function(e,t,n){"use strict";function r(e){for(var t=null,n=1;n<e.length;n++){var r=e[n],o=i(r);if(o!==r.length&&((null===t||o<t)&&0===(t=o)))break}return null===t?0:t}function i(e){for(var t=0;t<e.length&&(" "===e[t]||"\t"===e[t]);)t++;return t}function o(e){return i(e)===e.length}Object.defineProperty(t,"__esModule",{value:!0}),t.dedentBlockStringValue=function(e){var t=e.split(/\r\n|[\n\r]/g),n=r(t);if(0!==n)for(var i=1;i<t.length;i++)t[i]=t[i].slice(n);for(;t.length>0&&o(t[0]);)t.shift();for(;t.length>0&&o(t[t.length-1]);)t.pop();return t.join("\n")},t.getBlockStringIndentation=r,t.printBlockString=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=-1===e.indexOf("\n"),i=" "===e[0]||"\t"===e[0],o='"'===e[e.length-1],a="\\"===e[e.length-1],s=!r||o||a||n,u="";!s||r&&i||(u+="\n"+t);u+=t?e.replace(/\n/g,"\n"+t):e,s&&(u+="\n");return'"""'+u.replace(/"""/g,'\\"""')+'"""'}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!Boolean(e))throw new Error(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.syntaxError=function(e,t,n){return new r.GraphQLError("Syntax Error: ".concat(n),void 0,e,[t])};var r=n(29)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SYMBOL_TO_STRING_TAG=t.SYMBOL_ASYNC_ITERATOR=t.SYMBOL_ITERATOR=void 0;var r="function"==typeof Symbol?Symbol.iterator:"@@iterator";t.SYMBOL_ITERATOR=r;var i="function"==typeof Symbol?Symbol.asyncIterator:"@@asyncIterator";t.SYMBOL_ASYNC_ITERATOR=i;var o="function"==typeof Symbol?Symbol.toStringTag:"@@toStringTag";t.SYMBOL_TO_STRING_TAG=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getLocation=function(e,t){var n,r=/\r\n|[\n\r]/g,i=1,o=t+1;for(;(n=r.exec(e.body))&&n.index<t;)i+=1,o=t+1-(n.index+n[0].length);return{line:i,column:o}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TokenKind=void 0;var r=Object.freeze({SOF:"<SOF>",EOF:"<EOF>",BANG:"!",DOLLAR:"$",AMP:"&",PAREN_L:"(",PAREN_R:")",SPREAD:"...",COLON:":",EQUALS:"=",AT:"@",BRACKET_L:"[",BRACKET_R:"]",BRACE_L:"{",PIPE:"|",BRACE_R:"}",NAME:"Name",INT:"Int",FLOAT:"Float",STRING:"String",BLOCK_STRING:"BlockString",COMMENT:"Comment"});t.TokenKind=r},function(e,t,n){"use strict";(function(e,r){var i,o=n(17);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(o.a)(i);t.a=a}).call(this,n(23),n(24)(e))},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){e.exports=n(25).Observable},function(e,t,n){"use strict";e.exports=function(e,t){t||(t={}),"function"==typeof t&&(t={cmp:t});var n,r="boolean"==typeof t.cycles&&t.cycles,i=t.cmp&&(n=t.cmp,function(e){return function(t,r){var i={key:t,value:e[t]},o={key:r,value:e[r]};return n(i,o)}}),o=[];return function e(t){if(t&&t.toJSON&&"function"==typeof t.toJSON&&(t=t.toJSON()),void 0!==t){if("number"==typeof t)return isFinite(t)?""+t:"null";if("object"!=typeof t)return JSON.stringify(t);var n,a;if(Array.isArray(t)){for(a="[",n=0;n<t.length;n++)n&&(a+=","),a+=e(t[n])||"null";return a+"]"}if(null===t)return"null";if(-1!==o.indexOf(t)){if(r)return JSON.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON")}var s=o.push(t)-1,u=Object.keys(t).sort(i&&i(t));for(a="",n=0;n<u.length;n++){var c=u[n],l=e(t[c]);l&&(a&&(a+=","),a+=JSON.stringify(c)+":"+l)}return o.splice(s,1),"{"+a+"}"}}(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.print=function(e){return(0,r.visit)(e,{leave:o})};var r=n(3),i=n(10);var o={Name:function(e){return e.value},Variable:function(e){return"$"+e.name},Document:function(e){return s(e.definitions,"\n\n")+"\n"},OperationDefinition:function(e){var t=e.operation,n=e.name,r=c("(",s(e.variableDefinitions,", "),")"),i=s(e.directives," "),o=e.selectionSet;return n||i||r||"query"!==t?s([t,s([n,r]),i,o]," "):o},VariableDefinition:function(e){var t=e.variable,n=e.type,r=e.defaultValue,i=e.directives;return t+": "+n+c(" = ",r)+c(" ",s(i," "))},SelectionSet:function(e){return u(e.selections)},Field:function(e){var t=e.alias,n=e.name,r=e.arguments,i=e.directives,o=e.selectionSet;return s([c("",t,": ")+n+c("(",s(r,", "),")"),s(i," "),o]," ")},Argument:function(e){return e.name+": "+e.value},FragmentSpread:function(e){return"..."+e.name+c(" ",s(e.directives," "))},InlineFragment:function(e){var t=e.typeCondition,n=e.directives,r=e.selectionSet;return s(["...",c("on ",t),s(n," "),r]," ")},FragmentDefinition:function(e){var t=e.name,n=e.typeCondition,r=e.variableDefinitions,i=e.directives,o=e.selectionSet;return"fragment ".concat(t).concat(c("(",s(r,", "),")")," ")+"on ".concat(n," ").concat(c("",s(i," ")," "))+o},IntValue:function(e){return e.value},FloatValue:function(e){return e.value},StringValue:function(e,t){var n=e.value;return e.block?(0,i.printBlockString)(n,"description"===t?"":"  "):JSON.stringify(n)},BooleanValue:function(e){return e.value?"true":"false"},NullValue:function(){return"null"},EnumValue:function(e){return e.value},ListValue:function(e){return"["+s(e.values,", ")+"]"},ObjectValue:function(e){return"{"+s(e.fields,", ")+"}"},ObjectField:function(e){return e.name+": "+e.value},Directive:function(e){return"@"+e.name+c("(",s(e.arguments,", "),")")},NamedType:function(e){return e.name},ListType:function(e){return"["+e.type+"]"},NonNullType:function(e){return e.type+"!"},SchemaDefinition:a((function(e){var t=e.directives,n=e.operationTypes;return s(["schema",s(t," "),u(n)]," ")})),OperationTypeDefinition:function(e){return e.operation+": "+e.type},ScalarTypeDefinition:a((function(e){return s(["scalar",e.name,s(e.directives," ")]," ")})),ObjectTypeDefinition:a((function(e){var t=e.name,n=e.interfaces,r=e.directives,i=e.fields;return s(["type",t,c("implements ",s(n," & ")),s(r," "),u(i)]," ")})),FieldDefinition:a((function(e){var t=e.name,n=e.arguments,r=e.type,i=e.directives;return t+(p(n)?c("(\n",l(s(n,"\n")),"\n)"):c("(",s(n,", "),")"))+": "+r+c(" ",s(i," "))})),InputValueDefinition:a((function(e){var t=e.name,n=e.type,r=e.defaultValue,i=e.directives;return s([t+": "+n,c("= ",r),s(i," ")]," ")})),InterfaceTypeDefinition:a((function(e){var t=e.name,n=e.interfaces,r=e.directives,i=e.fields;return s(["interface",t,c("implements ",s(n," & ")),s(r," "),u(i)]," ")})),UnionTypeDefinition:a((function(e){var t=e.name,n=e.directives,r=e.types;return s(["union",t,s(n," "),r&&0!==r.length?"= "+s(r," | "):""]," ")})),EnumTypeDefinition:a((function(e){var t=e.name,n=e.directives,r=e.values;return s(["enum",t,s(n," "),u(r)]," ")})),EnumValueDefinition:a((function(e){return s([e.name,s(e.directives," ")]," ")})),InputObjectTypeDefinition:a((function(e){var t=e.name,n=e.directives,r=e.fields;return s(["input",t,s(n," "),u(r)]," ")})),DirectiveDefinition:a((function(e){var t=e.name,n=e.arguments,r=e.repeatable,i=e.locations;return"directive @"+t+(p(n)?c("(\n",l(s(n,"\n")),"\n)"):c("(",s(n,", "),")"))+(r?" repeatable":"")+" on "+s(i," | ")})),SchemaExtension:function(e){var t=e.directives,n=e.operationTypes;return s(["extend schema",s(t," "),u(n)]," ")},ScalarTypeExtension:function(e){return s(["extend scalar",e.name,s(e.directives," ")]," ")},ObjectTypeExtension:function(e){var t=e.name,n=e.interfaces,r=e.directives,i=e.fields;return s(["extend type",t,c("implements ",s(n," & ")),s(r," "),u(i)]," ")},InterfaceTypeExtension:function(e){var t=e.name,n=e.interfaces,r=e.directives,i=e.fields;return s(["extend interface",t,c("implements ",s(n," & ")),s(r," "),u(i)]," ")},UnionTypeExtension:function(e){var t=e.name,n=e.directives,r=e.types;return s(["extend union",t,s(n," "),r&&0!==r.length?"= "+s(r," | "):""]," ")},EnumTypeExtension:function(e){var t=e.name,n=e.directives,r=e.values;return s(["extend enum",t,s(n," "),u(r)]," ")},InputObjectTypeExtension:function(e){var t=e.name,n=e.directives,r=e.fields;return s(["extend input",t,s(n," "),u(r)]," ")}};function a(e){return function(t){return s([t.description,e(t)],"\n")}}function s(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return null!==(t=null==e?void 0:e.filter((function(e){return e})).join(n))&&void 0!==t?t:""}function u(e){return e&&0!==e.length?"{\n"+l(s(e,"\n"))+"\n}":""}function c(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return t?e+t+n:""}function l(e){return e&&"  "+e.replace(/\n/g,"\n  ")}function f(e){return-1!==e.indexOf("\n")}function p(e){return e&&e.some(f)}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.renderUserList=t.renderResults=t.getLondonUsers=void 0;var o=n(22),a=n(36);n(37);var s=o.createApolloClient();t.getLondonUsers=function(e){return new Promise((function(t,n){return r(void 0,void 0,void 0,(function(){var r,o;return i(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,(e||s).query({query:a.LONDON_USERS})];case 1:return r=i.sent(),t(r),[3,3];case 2:return o=i.sent(),n(o),[3,3];case 3:return[2]}}))}))}))},t.renderResults=function(e){var t="";return e.forEach((function(e){var n=e.first_name,r=e.last_name,i=e.email,o=e.ip_address,a=e.distance,s=e.livesInLondon;t+='\n\t\t\t<li class="user-list__item">\n\t\t\t<h3 class="user-list__item-title">'+n+" "+r+'</h3>\n\t\t\t<ul class="user-list__item-meta">\n\t\t\t\t<li class="user-list__item-meta-attribute">\n\t\t\t\t\tEmail: <a href="mailto:'+i+'" class="link" title="'+i+'">'+i+'</a>\n\t\t\t\t</li>\n\t\t\t\t<li class="user-list__item-meta-attribute">\n\t\t\t\t\tIP Address: '+o+'\n\t\t\t\t</li>\n\t\t\t\t<li class="user-list__item-meta-attribute">\n\t\t\t\t\t'+(s?"Lives in London":"Current distance from London: "+a.toFixed(2)+" miles")+"\n\t\t\t\t\t<span>\n\t\t\t\t\t</span>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</li>\n\t\t\t"})),t},t.renderUserList=function(){return r(void 0,void 0,void 0,(function(){var e,n,r,o;return i(this,(function(i){switch(i.label){case 0:if(!(e=document.querySelector("#app")))return[3,4];n=function(t){e.innerHTML=t},i.label=1;case 1:return i.trys.push([1,3,,4]),[4,t.getLondonUsers()];case 2:return(null==(r=i.sent().data)?void 0:r.londonUsers.length)?n('\n\t\t\t\t\t<ol class="user-list">\n\t\t\t\t\t'+t.renderResults(r.londonUsers)+"\n\t\t\t\t\t</ol>\n\t\t\t\t\t"):n('<p data-alert="warning" role="alert">No users found</p>'),[3,4];case 3:return o=i.sent(),n('<p data-alert="error" role="alert">'+o+"</p>"),[3,4];case 4:return[2]}}))}))},t.renderUserList()},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.createApolloClient=void 0;var i=n(38),o=new i.InMemoryCache;t.createApolloClient=function(e){return void 0===e&&(e={}),new i.default(r({cache:o,uri:"/api"},e))}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}Object.defineProperty(t,"__esModule",{value:!0}),t.Observable=void 0;var a=function(){return"function"==typeof Symbol},s=function(e){return a()&&Boolean(Symbol[e])},u=function(e){return s(e)?Symbol[e]:"@@"+e};a()&&!s("observable")&&(Symbol.observable=Symbol("observable"));var c=u("iterator"),l=u("observable"),f=u("species");function p(e,t){var n=e[t];if(null!=n){if("function"!=typeof n)throw new TypeError(n+" is not a function");return n}}function d(e){var t=e.constructor;return void 0!==t&&null===(t=t[f])&&(t=void 0),void 0!==t?t:T}function h(e){return e instanceof T}function v(e){v.log?v.log(e):setTimeout((function(){throw e}))}function y(e){Promise.resolve().then((function(){try{e()}catch(e){v(e)}}))}function b(e){var t=e._cleanup;if(void 0!==t&&(e._cleanup=void 0,t))try{if("function"==typeof t)t();else{var n=p(t,"unsubscribe");n&&n.call(t)}}catch(e){v(e)}}function m(e){e._observer=void 0,e._queue=void 0,e._state="closed"}function O(e,t,n){e._state="running";var r=e._observer;try{var i=p(r,t);switch(t){case"next":i&&i.call(r,n);break;case"error":if(m(e),!i)throw n;i.call(r,n);break;case"complete":m(e),i&&i.call(r)}}catch(e){v(e)}"closed"===e._state?b(e):"running"===e._state&&(e._state="ready")}function g(e,t,n){if("closed"!==e._state){if("buffering"!==e._state)return"ready"!==e._state?(e._state="buffering",e._queue=[{type:t,value:n}],void y((function(){return function(e){var t=e._queue;if(t){e._queue=void 0,e._state="ready";for(var n=0;n<t.length&&(O(e,t[n].type,t[n].value),"closed"!==e._state);++n);}}(e)}))):void O(e,t,n);e._queue.push({type:t,value:n})}}var k=function(){function e(t,n){r(this,e),this._cleanup=void 0,this._observer=t,this._queue=void 0,this._state="initializing";var i=new E(this);try{this._cleanup=n.call(void 0,i)}catch(e){i.error(e)}"initializing"===this._state&&(this._state="ready")}return o(e,[{key:"unsubscribe",value:function(){"closed"!==this._state&&(m(this),b(this))}},{key:"closed",get:function(){return"closed"===this._state}}]),e}(),E=function(){function e(t){r(this,e),this._subscription=t}return o(e,[{key:"next",value:function(e){g(this._subscription,"next",e)}},{key:"error",value:function(e){g(this._subscription,"error",e)}},{key:"complete",value:function(){g(this._subscription,"complete")}},{key:"closed",get:function(){return"closed"===this._subscription._state}}]),e}(),T=function(){function e(t){if(r(this,e),!(this instanceof e))throw new TypeError("Observable cannot be called as a function");if("function"!=typeof t)throw new TypeError("Observable initializer must be a function");this._subscriber=t}return o(e,[{key:"subscribe",value:function(e){return"object"==typeof e&&null!==e||(e={next:e,error:arguments[1],complete:arguments[2]}),new k(e,this._subscriber)}},{key:"forEach",value:function(e){var t=this;return new Promise((function(n,r){if("function"==typeof e)var i=t.subscribe({next:function(t){try{e(t,o)}catch(e){r(e),i.unsubscribe()}},error:r,complete:n});else r(new TypeError(e+" is not a function"));function o(){i.unsubscribe(),n()}}))}},{key:"map",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(d(this))((function(n){return t.subscribe({next:function(t){try{t=e(t)}catch(e){return n.error(e)}n.next(t)},error:function(e){n.error(e)},complete:function(){n.complete()}})}))}},{key:"filter",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(d(this))((function(n){return t.subscribe({next:function(t){try{if(!e(t))return}catch(e){return n.error(e)}n.next(t)},error:function(e){n.error(e)},complete:function(){n.complete()}})}))}},{key:"reduce",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var n=d(this),r=arguments.length>1,i=!1,o=arguments[1],a=o;return new n((function(n){return t.subscribe({next:function(t){var o=!i;if(i=!0,!o||r)try{a=e(a,t)}catch(e){return n.error(e)}else a=t},error:function(e){n.error(e)},complete:function(){if(!i&&!r)return n.error(new TypeError("Cannot reduce an empty sequence"));n.next(a),n.complete()}})}))}},{key:"concat",value:function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var i=d(this);return new i((function(t){var r,o=0;return function e(a){r=a.subscribe({next:function(e){t.next(e)},error:function(e){t.error(e)},complete:function(){o===n.length?(r=void 0,t.complete()):e(i.from(n[o++]))}})}(e),function(){r&&(r.unsubscribe(),r=void 0)}}))}},{key:"flatMap",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var n=d(this);return new n((function(r){var i=[],o=t.subscribe({next:function(t){if(e)try{t=e(t)}catch(e){return r.error(e)}var o=n.from(t).subscribe({next:function(e){r.next(e)},error:function(e){r.error(e)},complete:function(){var e=i.indexOf(o);e>=0&&i.splice(e,1),a()}});i.push(o)},error:function(e){r.error(e)},complete:function(){a()}});function a(){o.closed&&0===i.length&&r.complete()}return function(){i.forEach((function(e){return e.unsubscribe()})),o.unsubscribe()}}))}},{key:l,value:function(){return this}}],[{key:"from",value:function(t){var n="function"==typeof this?this:e;if(null==t)throw new TypeError(t+" is not an object");var r=p(t,l);if(r){var i=r.call(t);if(Object(i)!==i)throw new TypeError(i+" is not an object");return h(i)&&i.constructor===n?i:new n((function(e){return i.subscribe(e)}))}if(s("iterator")&&(r=p(t,c)))return new n((function(e){y((function(){if(!e.closed){var n=!0,i=!1,o=void 0;try{for(var a,s=r.call(t)[Symbol.iterator]();!(n=(a=s.next()).done);n=!0){var u=a.value;if(e.next(u),e.closed)return}}catch(e){i=!0,o=e}finally{try{n||null==s.return||s.return()}finally{if(i)throw o}}e.complete()}}))}));if(Array.isArray(t))return new n((function(e){y((function(){if(!e.closed){for(var n=0;n<t.length;++n)if(e.next(t[n]),e.closed)return;e.complete()}}))}));throw new TypeError(t+" is not observable")}},{key:"of",value:function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var i="function"==typeof this?this:e;return new i((function(e){y((function(){if(!e.closed){for(var t=0;t<n.length;++t)if(e.next(n[t]),e.closed)return;e.complete()}}))}))}},{key:f,get:function(){return this}}]),e}();t.Observable=T,a()&&Object.defineProperty(T,Symbol("extensions"),{value:{symbol:l,hostReportError:v},configurable:!0})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.prototype.toJSON;"function"==typeof t||(0,r.default)(0),e.prototype.inspect=t,i.default&&(e.prototype[i.default]=t)};var r=o(n(27)),i=o(n(9));function o(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!Boolean(e))throw new Error(null!=t?t:"Unexpected invariant triggered.")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parse=function(e,t){return new d(e,t).parseDocument()},t.parseValue=function(e,t){var n=new d(e,t);n.expectToken(c.TokenKind.SOF);var r=n.parseValueLiteral(!1);return n.expectToken(c.TokenKind.EOF),r},t.parseType=function(e,t){var n=new d(e,t);n.expectToken(c.TokenKind.SOF);var r=n.parseTypeReference();return n.expectToken(c.TokenKind.EOF),r};var r=p(n(8)),i=p(n(11)),o=n(12),a=n(32),s=n(33),u=n(34),c=n(15),l=n(35),f=n(4);function p(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){var n="string"==typeof e?new s.Source(e):e;n instanceof s.Source||(0,i.default)(0,"Must provide Source. Received: ".concat((0,r.default)(n),".")),this._lexer=new l.Lexer(n),this._options=t}var t=e.prototype;return t.parseName=function(){var e=this.expectToken(c.TokenKind.NAME);return{kind:a.Kind.NAME,value:e.value,loc:this.loc(e)}},t.parseDocument=function(){var e=this._lexer.token;return{kind:a.Kind.DOCUMENT,definitions:this.many(c.TokenKind.SOF,this.parseDefinition,c.TokenKind.EOF),loc:this.loc(e)}},t.parseDefinition=function(){if(this.peek(c.TokenKind.NAME))switch(this._lexer.token.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"schema":case"scalar":case"type":case"interface":case"union":case"enum":case"input":case"directive":return this.parseTypeSystemDefinition();case"extend":return this.parseTypeSystemExtension()}else{if(this.peek(c.TokenKind.BRACE_L))return this.parseOperationDefinition();if(this.peekDescription())return this.parseTypeSystemDefinition()}throw this.unexpected()},t.parseOperationDefinition=function(){var e=this._lexer.token;if(this.peek(c.TokenKind.BRACE_L))return{kind:a.Kind.OPERATION_DEFINITION,operation:"query",name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet(),loc:this.loc(e)};var t,n=this.parseOperationType();return this.peek(c.TokenKind.NAME)&&(t=this.parseName()),{kind:a.Kind.OPERATION_DEFINITION,operation:n,name:t,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}},t.parseOperationType=function(){var e=this.expectToken(c.TokenKind.NAME);switch(e.value){case"query":return"query";case"mutation":return"mutation";case"subscription":return"subscription"}throw this.unexpected(e)},t.parseVariableDefinitions=function(){return this.optionalMany(c.TokenKind.PAREN_L,this.parseVariableDefinition,c.TokenKind.PAREN_R)},t.parseVariableDefinition=function(){var e=this._lexer.token;return{kind:a.Kind.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(c.TokenKind.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(c.TokenKind.EQUALS)?this.parseValueLiteral(!0):void 0,directives:this.parseDirectives(!0),loc:this.loc(e)}},t.parseVariable=function(){var e=this._lexer.token;return this.expectToken(c.TokenKind.DOLLAR),{kind:a.Kind.VARIABLE,name:this.parseName(),loc:this.loc(e)}},t.parseSelectionSet=function(){var e=this._lexer.token;return{kind:a.Kind.SELECTION_SET,selections:this.many(c.TokenKind.BRACE_L,this.parseSelection,c.TokenKind.BRACE_R),loc:this.loc(e)}},t.parseSelection=function(){return this.peek(c.TokenKind.SPREAD)?this.parseFragment():this.parseField()},t.parseField=function(){var e,t,n=this._lexer.token,r=this.parseName();return this.expectOptionalToken(c.TokenKind.COLON)?(e=r,t=this.parseName()):t=r,{kind:a.Kind.FIELD,alias:e,name:t,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(c.TokenKind.BRACE_L)?this.parseSelectionSet():void 0,loc:this.loc(n)}},t.parseArguments=function(e){var t=e?this.parseConstArgument:this.parseArgument;return this.optionalMany(c.TokenKind.PAREN_L,t,c.TokenKind.PAREN_R)},t.parseArgument=function(){var e=this._lexer.token,t=this.parseName();return this.expectToken(c.TokenKind.COLON),{kind:a.Kind.ARGUMENT,name:t,value:this.parseValueLiteral(!1),loc:this.loc(e)}},t.parseConstArgument=function(){var e=this._lexer.token;return{kind:a.Kind.ARGUMENT,name:this.parseName(),value:(this.expectToken(c.TokenKind.COLON),this.parseValueLiteral(!0)),loc:this.loc(e)}},t.parseFragment=function(){var e=this._lexer.token;this.expectToken(c.TokenKind.SPREAD);var t=this.expectOptionalKeyword("on");return!t&&this.peek(c.TokenKind.NAME)?{kind:a.Kind.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1),loc:this.loc(e)}:{kind:a.Kind.INLINE_FRAGMENT,typeCondition:t?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}},t.parseFragmentDefinition=function(){var e,t=this._lexer.token;return this.expectKeyword("fragment"),!0===(null===(e=this._options)||void 0===e?void 0:e.experimentalFragmentVariables)?{kind:a.Kind.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(t)}:{kind:a.Kind.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(t)}},t.parseFragmentName=function(){if("on"===this._lexer.token.value)throw this.unexpected();return this.parseName()},t.parseValueLiteral=function(e){var t=this._lexer.token;switch(t.kind){case c.TokenKind.BRACKET_L:return this.parseList(e);case c.TokenKind.BRACE_L:return this.parseObject(e);case c.TokenKind.INT:return this._lexer.advance(),{kind:a.Kind.INT,value:t.value,loc:this.loc(t)};case c.TokenKind.FLOAT:return this._lexer.advance(),{kind:a.Kind.FLOAT,value:t.value,loc:this.loc(t)};case c.TokenKind.STRING:case c.TokenKind.BLOCK_STRING:return this.parseStringLiteral();case c.TokenKind.NAME:switch(this._lexer.advance(),t.value){case"true":return{kind:a.Kind.BOOLEAN,value:!0,loc:this.loc(t)};case"false":return{kind:a.Kind.BOOLEAN,value:!1,loc:this.loc(t)};case"null":return{kind:a.Kind.NULL,loc:this.loc(t)};default:return{kind:a.Kind.ENUM,value:t.value,loc:this.loc(t)}}case c.TokenKind.DOLLAR:if(!e)return this.parseVariable()}throw this.unexpected()},t.parseStringLiteral=function(){var e=this._lexer.token;return this._lexer.advance(),{kind:a.Kind.STRING,value:e.value,block:e.kind===c.TokenKind.BLOCK_STRING,loc:this.loc(e)}},t.parseList=function(e){var t=this,n=this._lexer.token;return{kind:a.Kind.LIST,values:this.any(c.TokenKind.BRACKET_L,(function(){return t.parseValueLiteral(e)}),c.TokenKind.BRACKET_R),loc:this.loc(n)}},t.parseObject=function(e){var t=this,n=this._lexer.token;return{kind:a.Kind.OBJECT,fields:this.any(c.TokenKind.BRACE_L,(function(){return t.parseObjectField(e)}),c.TokenKind.BRACE_R),loc:this.loc(n)}},t.parseObjectField=function(e){var t=this._lexer.token,n=this.parseName();return this.expectToken(c.TokenKind.COLON),{kind:a.Kind.OBJECT_FIELD,name:n,value:this.parseValueLiteral(e),loc:this.loc(t)}},t.parseDirectives=function(e){for(var t=[];this.peek(c.TokenKind.AT);)t.push(this.parseDirective(e));return t},t.parseDirective=function(e){var t=this._lexer.token;return this.expectToken(c.TokenKind.AT),{kind:a.Kind.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(e),loc:this.loc(t)}},t.parseTypeReference=function(){var e,t=this._lexer.token;return this.expectOptionalToken(c.TokenKind.BRACKET_L)?(e=this.parseTypeReference(),this.expectToken(c.TokenKind.BRACKET_R),e={kind:a.Kind.LIST_TYPE,type:e,loc:this.loc(t)}):e=this.parseNamedType(),this.expectOptionalToken(c.TokenKind.BANG)?{kind:a.Kind.NON_NULL_TYPE,type:e,loc:this.loc(t)}:e},t.parseNamedType=function(){var e=this._lexer.token;return{kind:a.Kind.NAMED_TYPE,name:this.parseName(),loc:this.loc(e)}},t.parseTypeSystemDefinition=function(){var e=this.peekDescription()?this._lexer.lookahead():this._lexer.token;if(e.kind===c.TokenKind.NAME)switch(e.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}throw this.unexpected(e)},t.peekDescription=function(){return this.peek(c.TokenKind.STRING)||this.peek(c.TokenKind.BLOCK_STRING)},t.parseDescription=function(){if(this.peekDescription())return this.parseStringLiteral()},t.parseSchemaDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("schema");var n=this.parseDirectives(!0),r=this.many(c.TokenKind.BRACE_L,this.parseOperationTypeDefinition,c.TokenKind.BRACE_R);return{kind:a.Kind.SCHEMA_DEFINITION,description:t,directives:n,operationTypes:r,loc:this.loc(e)}},t.parseOperationTypeDefinition=function(){var e=this._lexer.token,t=this.parseOperationType();this.expectToken(c.TokenKind.COLON);var n=this.parseNamedType();return{kind:a.Kind.OPERATION_TYPE_DEFINITION,operation:t,type:n,loc:this.loc(e)}},t.parseScalarTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("scalar");var n=this.parseName(),r=this.parseDirectives(!0);return{kind:a.Kind.SCALAR_TYPE_DEFINITION,description:t,name:n,directives:r,loc:this.loc(e)}},t.parseObjectTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("type");var n=this.parseName(),r=this.parseImplementsInterfaces(),i=this.parseDirectives(!0),o=this.parseFieldsDefinition();return{kind:a.Kind.OBJECT_TYPE_DEFINITION,description:t,name:n,interfaces:r,directives:i,fields:o,loc:this.loc(e)}},t.parseImplementsInterfaces=function(){var e=[];if(this.expectOptionalKeyword("implements")){this.expectOptionalToken(c.TokenKind.AMP);do{var t;e.push(this.parseNamedType())}while(this.expectOptionalToken(c.TokenKind.AMP)||!0===(null===(t=this._options)||void 0===t?void 0:t.allowLegacySDLImplementsInterfaces)&&this.peek(c.TokenKind.NAME))}return e},t.parseFieldsDefinition=function(){var e;return!0===(null===(e=this._options)||void 0===e?void 0:e.allowLegacySDLEmptyFields)&&this.peek(c.TokenKind.BRACE_L)&&this._lexer.lookahead().kind===c.TokenKind.BRACE_R?(this._lexer.advance(),this._lexer.advance(),[]):this.optionalMany(c.TokenKind.BRACE_L,this.parseFieldDefinition,c.TokenKind.BRACE_R)},t.parseFieldDefinition=function(){var e=this._lexer.token,t=this.parseDescription(),n=this.parseName(),r=this.parseArgumentDefs();this.expectToken(c.TokenKind.COLON);var i=this.parseTypeReference(),o=this.parseDirectives(!0);return{kind:a.Kind.FIELD_DEFINITION,description:t,name:n,arguments:r,type:i,directives:o,loc:this.loc(e)}},t.parseArgumentDefs=function(){return this.optionalMany(c.TokenKind.PAREN_L,this.parseInputValueDef,c.TokenKind.PAREN_R)},t.parseInputValueDef=function(){var e=this._lexer.token,t=this.parseDescription(),n=this.parseName();this.expectToken(c.TokenKind.COLON);var r,i=this.parseTypeReference();this.expectOptionalToken(c.TokenKind.EQUALS)&&(r=this.parseValueLiteral(!0));var o=this.parseDirectives(!0);return{kind:a.Kind.INPUT_VALUE_DEFINITION,description:t,name:n,type:i,defaultValue:r,directives:o,loc:this.loc(e)}},t.parseInterfaceTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("interface");var n=this.parseName(),r=this.parseImplementsInterfaces(),i=this.parseDirectives(!0),o=this.parseFieldsDefinition();return{kind:a.Kind.INTERFACE_TYPE_DEFINITION,description:t,name:n,interfaces:r,directives:i,fields:o,loc:this.loc(e)}},t.parseUnionTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("union");var n=this.parseName(),r=this.parseDirectives(!0),i=this.parseUnionMemberTypes();return{kind:a.Kind.UNION_TYPE_DEFINITION,description:t,name:n,directives:r,types:i,loc:this.loc(e)}},t.parseUnionMemberTypes=function(){var e=[];if(this.expectOptionalToken(c.TokenKind.EQUALS)){this.expectOptionalToken(c.TokenKind.PIPE);do{e.push(this.parseNamedType())}while(this.expectOptionalToken(c.TokenKind.PIPE))}return e},t.parseEnumTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("enum");var n=this.parseName(),r=this.parseDirectives(!0),i=this.parseEnumValuesDefinition();return{kind:a.Kind.ENUM_TYPE_DEFINITION,description:t,name:n,directives:r,values:i,loc:this.loc(e)}},t.parseEnumValuesDefinition=function(){return this.optionalMany(c.TokenKind.BRACE_L,this.parseEnumValueDefinition,c.TokenKind.BRACE_R)},t.parseEnumValueDefinition=function(){var e=this._lexer.token,t=this.parseDescription(),n=this.parseName(),r=this.parseDirectives(!0);return{kind:a.Kind.ENUM_VALUE_DEFINITION,description:t,name:n,directives:r,loc:this.loc(e)}},t.parseInputObjectTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("input");var n=this.parseName(),r=this.parseDirectives(!0),i=this.parseInputFieldsDefinition();return{kind:a.Kind.INPUT_OBJECT_TYPE_DEFINITION,description:t,name:n,directives:r,fields:i,loc:this.loc(e)}},t.parseInputFieldsDefinition=function(){return this.optionalMany(c.TokenKind.BRACE_L,this.parseInputValueDef,c.TokenKind.BRACE_R)},t.parseTypeSystemExtension=function(){var e=this._lexer.lookahead();if(e.kind===c.TokenKind.NAME)switch(e.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(e)},t.parseSchemaExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");var t=this.parseDirectives(!0),n=this.optionalMany(c.TokenKind.BRACE_L,this.parseOperationTypeDefinition,c.TokenKind.BRACE_R);if(0===t.length&&0===n.length)throw this.unexpected();return{kind:a.Kind.SCHEMA_EXTENSION,directives:t,operationTypes:n,loc:this.loc(e)}},t.parseScalarTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");var t=this.parseName(),n=this.parseDirectives(!0);if(0===n.length)throw this.unexpected();return{kind:a.Kind.SCALAR_TYPE_EXTENSION,name:t,directives:n,loc:this.loc(e)}},t.parseObjectTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");var t=this.parseName(),n=this.parseImplementsInterfaces(),r=this.parseDirectives(!0),i=this.parseFieldsDefinition();if(0===n.length&&0===r.length&&0===i.length)throw this.unexpected();return{kind:a.Kind.OBJECT_TYPE_EXTENSION,name:t,interfaces:n,directives:r,fields:i,loc:this.loc(e)}},t.parseInterfaceTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");var t=this.parseName(),n=this.parseImplementsInterfaces(),r=this.parseDirectives(!0),i=this.parseFieldsDefinition();if(0===n.length&&0===r.length&&0===i.length)throw this.unexpected();return{kind:a.Kind.INTERFACE_TYPE_EXTENSION,name:t,interfaces:n,directives:r,fields:i,loc:this.loc(e)}},t.parseUnionTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");var t=this.parseName(),n=this.parseDirectives(!0),r=this.parseUnionMemberTypes();if(0===n.length&&0===r.length)throw this.unexpected();return{kind:a.Kind.UNION_TYPE_EXTENSION,name:t,directives:n,types:r,loc:this.loc(e)}},t.parseEnumTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");var t=this.parseName(),n=this.parseDirectives(!0),r=this.parseEnumValuesDefinition();if(0===n.length&&0===r.length)throw this.unexpected();return{kind:a.Kind.ENUM_TYPE_EXTENSION,name:t,directives:n,values:r,loc:this.loc(e)}},t.parseInputObjectTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");var t=this.parseName(),n=this.parseDirectives(!0),r=this.parseInputFieldsDefinition();if(0===n.length&&0===r.length)throw this.unexpected();return{kind:a.Kind.INPUT_OBJECT_TYPE_EXTENSION,name:t,directives:n,fields:r,loc:this.loc(e)}},t.parseDirectiveDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("directive"),this.expectToken(c.TokenKind.AT);var n=this.parseName(),r=this.parseArgumentDefs(),i=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");var o=this.parseDirectiveLocations();return{kind:a.Kind.DIRECTIVE_DEFINITION,description:t,name:n,arguments:r,repeatable:i,locations:o,loc:this.loc(e)}},t.parseDirectiveLocations=function(){this.expectOptionalToken(c.TokenKind.PIPE);var e=[];do{e.push(this.parseDirectiveLocation())}while(this.expectOptionalToken(c.TokenKind.PIPE));return e},t.parseDirectiveLocation=function(){var e=this._lexer.token,t=this.parseName();if(void 0!==u.DirectiveLocation[t.value])return t;throw this.unexpected(e)},t.loc=function(e){var t;if(!0!==(null===(t=this._options)||void 0===t?void 0:t.noLocation))return new f.Location(e,this._lexer.lastToken,this._lexer.source)},t.peek=function(e){return this._lexer.token.kind===e},t.expectToken=function(e){var t=this._lexer.token;if(t.kind===e)return this._lexer.advance(),t;throw(0,o.syntaxError)(this._lexer.source,t.start,"Expected ".concat(v(e),", found ").concat(h(t),"."))},t.expectOptionalToken=function(e){var t=this._lexer.token;if(t.kind===e)return this._lexer.advance(),t},t.expectKeyword=function(e){var t=this._lexer.token;if(t.kind!==c.TokenKind.NAME||t.value!==e)throw(0,o.syntaxError)(this._lexer.source,t.start,'Expected "'.concat(e,'", found ').concat(h(t),"."));this._lexer.advance()},t.expectOptionalKeyword=function(e){var t=this._lexer.token;return t.kind===c.TokenKind.NAME&&t.value===e&&(this._lexer.advance(),!0)},t.unexpected=function(e){var t=null!=e?e:this._lexer.token;return(0,o.syntaxError)(this._lexer.source,t.start,"Unexpected ".concat(h(t),"."))},t.any=function(e,t,n){this.expectToken(e);for(var r=[];!this.expectOptionalToken(n);)r.push(t.call(this));return r},t.optionalMany=function(e,t,n){if(this.expectOptionalToken(e)){var r=[];do{r.push(t.call(this))}while(!this.expectOptionalToken(n));return r}return[]},t.many=function(e,t,n){this.expectToken(e);var r=[];do{r.push(t.call(this))}while(!this.expectOptionalToken(n));return r},e}();function h(e){var t=e.value;return v(e.kind)+(null!=t?' "'.concat(t,'"'):"")}function v(e){return(0,l.isPunctuatorTokenKind)(e)?'"'.concat(e,'"'):e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printError=m,t.GraphQLError=void 0;var r,i=(r=n(30))&&r.__esModule?r:{default:r},o=n(13),a=n(14),s=n(31);function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?f(e):t}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e){var t="function"==typeof Map?new Map:void 0;return(p=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return d(e,arguments,y(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),v(r,e)})(e)}function d(e,t,n){return(d=h()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&v(i,n.prototype),i}).apply(null,arguments)}function h(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(d,e);var t,n,r,s,u,p=(t=d,n=h(),function(){var e,r=y(t);if(n){var i=y(this).constructor;e=Reflect.construct(r,arguments,i)}else e=r.apply(this,arguments);return l(this,e)});function d(e,t,n,r,o,s,u){var c,h,v,y,b;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d),b=p.call(this,e);var m,O=Array.isArray(t)?0!==t.length?t:void 0:t?[t]:void 0,g=n;!g&&O&&(g=null===(m=O[0].loc)||void 0===m?void 0:m.source);var k,E=r;!E&&O&&(E=O.reduce((function(e,t){return t.loc&&e.push(t.loc.start),e}),[])),E&&0===E.length&&(E=void 0),r&&n?k=r.map((function(e){return(0,a.getLocation)(n,e)})):O&&(k=O.reduce((function(e,t){return t.loc&&e.push((0,a.getLocation)(t.loc.source,t.loc.start)),e}),[]));var T=u;if(null==T&&null!=s){var w=s.extensions;(0,i.default)(w)&&(T=w)}return Object.defineProperties(f(b),{name:{value:"GraphQLError"},message:{value:e,enumerable:!0,writable:!0},locations:{value:null!==(c=k)&&void 0!==c?c:void 0,enumerable:null!=k},path:{value:null!=o?o:void 0,enumerable:null!=o},nodes:{value:null!=O?O:void 0},source:{value:null!==(h=g)&&void 0!==h?h:void 0},positions:{value:null!==(v=E)&&void 0!==v?v:void 0},originalError:{value:s},extensions:{value:null!==(y=T)&&void 0!==y?y:void 0,enumerable:null!=T}}),(null==s?void 0:s.stack)?(Object.defineProperty(f(b),"stack",{value:s.stack,writable:!0,configurable:!0}),l(b)):(Error.captureStackTrace?Error.captureStackTrace(f(b),d):Object.defineProperty(f(b),"stack",{value:Error().stack,writable:!0,configurable:!0}),b)}return r=d,(s=[{key:"toString",value:function(){return m(this)}},{key:o.SYMBOL_TO_STRING_TAG,get:function(){return"Object"}}])&&c(r.prototype,s),u&&c(r,u),d}(p(Error));function m(e){var t=e.message;if(e.nodes)for(var n=0,r=e.nodes;n<r.length;n++){var i=r[n];i.loc&&(t+="\n\n"+(0,s.printLocation)(i.loc))}else if(e.source&&e.locations)for(var o=0,a=e.locations;o<a.length;o++){var u=a[o];t+="\n\n"+(0,s.printSourceLocation)(e.source,u)}return t}t.GraphQLError=b},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"object"==r(e)&&null!==e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printLocation=function(e){return i(e.source,(0,r.getLocation)(e.source,e.start))},t.printSourceLocation=i;var r=n(14);function i(e,t){var n=e.locationOffset.column-1,r=a(n)+e.body,i=t.line-1,s=e.locationOffset.line-1,u=t.line+s,c=1===t.line?n:0,l=t.column+c,f="".concat(e.name,":").concat(u,":").concat(l,"\n"),p=r.split(/\r\n|[\n\r]/g),d=p[i];if(d.length>120){for(var h=Math.floor(l/80),v=l%80,y=[],b=0;b<d.length;b+=80)y.push(d.slice(b,b+80));return f+o([["".concat(u),y[0]]].concat(y.slice(1,h+1).map((function(e){return["",e]})),[[" ",a(v-1)+"^"],["",y[h+1]]]))}return f+o([["".concat(u-1),p[i-1]],["".concat(u),d],["",a(l-1)+"^"],["".concat(u+1),p[i+1]]])}function o(e){var t=e.filter((function(e){e[0];return void 0!==e[1]})),n=Math.max.apply(Math,t.map((function(e){return e[0].length})));return t.map((function(e){var t,r=e[0],i=e[1];return a(n-(t=r).length)+t+(i?" | "+i:" |")})).join("\n")}function a(e){return Array(e+1).join(" ")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Kind=void 0;var r=Object.freeze({NAME:"Name",DOCUMENT:"Document",OPERATION_DEFINITION:"OperationDefinition",VARIABLE_DEFINITION:"VariableDefinition",SELECTION_SET:"SelectionSet",FIELD:"Field",ARGUMENT:"Argument",FRAGMENT_SPREAD:"FragmentSpread",INLINE_FRAGMENT:"InlineFragment",FRAGMENT_DEFINITION:"FragmentDefinition",VARIABLE:"Variable",INT:"IntValue",FLOAT:"FloatValue",STRING:"StringValue",BOOLEAN:"BooleanValue",NULL:"NullValue",ENUM:"EnumValue",LIST:"ListValue",OBJECT:"ObjectValue",OBJECT_FIELD:"ObjectField",DIRECTIVE:"Directive",NAMED_TYPE:"NamedType",LIST_TYPE:"ListType",NON_NULL_TYPE:"NonNullType",SCHEMA_DEFINITION:"SchemaDefinition",OPERATION_TYPE_DEFINITION:"OperationTypeDefinition",SCALAR_TYPE_DEFINITION:"ScalarTypeDefinition",OBJECT_TYPE_DEFINITION:"ObjectTypeDefinition",FIELD_DEFINITION:"FieldDefinition",INPUT_VALUE_DEFINITION:"InputValueDefinition",INTERFACE_TYPE_DEFINITION:"InterfaceTypeDefinition",UNION_TYPE_DEFINITION:"UnionTypeDefinition",ENUM_TYPE_DEFINITION:"EnumTypeDefinition",ENUM_VALUE_DEFINITION:"EnumValueDefinition",INPUT_OBJECT_TYPE_DEFINITION:"InputObjectTypeDefinition",DIRECTIVE_DEFINITION:"DirectiveDefinition",SCHEMA_EXTENSION:"SchemaExtension",SCALAR_TYPE_EXTENSION:"ScalarTypeExtension",OBJECT_TYPE_EXTENSION:"ObjectTypeExtension",INTERFACE_TYPE_EXTENSION:"InterfaceTypeExtension",UNION_TYPE_EXTENSION:"UnionTypeExtension",ENUM_TYPE_EXTENSION:"EnumTypeExtension",INPUT_OBJECT_TYPE_EXTENSION:"InputObjectTypeExtension"});t.Kind=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Source=void 0;var r,i=n(13),o=(r=n(11))&&r.__esModule?r:{default:r};function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GraphQL request",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{line:1,column:1};this.body=e,this.name=t,this.locationOffset=n,this.locationOffset.line>0||(0,o.default)(0,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||(0,o.default)(0,"column in locationOffset is 1-indexed and must be positive.")}var t,n,r;return t=e,(n=[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"Source"}}])&&a(t.prototype,n),r&&a(t,r),e}();t.Source=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DirectiveLocation=void 0;var r=Object.freeze({QUERY:"QUERY",MUTATION:"MUTATION",SUBSCRIPTION:"SUBSCRIPTION",FIELD:"FIELD",FRAGMENT_DEFINITION:"FRAGMENT_DEFINITION",FRAGMENT_SPREAD:"FRAGMENT_SPREAD",INLINE_FRAGMENT:"INLINE_FRAGMENT",VARIABLE_DEFINITION:"VARIABLE_DEFINITION",SCHEMA:"SCHEMA",SCALAR:"SCALAR",OBJECT:"OBJECT",FIELD_DEFINITION:"FIELD_DEFINITION",ARGUMENT_DEFINITION:"ARGUMENT_DEFINITION",INTERFACE:"INTERFACE",UNION:"UNION",ENUM:"ENUM",ENUM_VALUE:"ENUM_VALUE",INPUT_OBJECT:"INPUT_OBJECT",INPUT_FIELD_DEFINITION:"INPUT_FIELD_DEFINITION"});t.DirectiveLocation=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isPunctuatorTokenKind=function(e){return e===a.TokenKind.BANG||e===a.TokenKind.DOLLAR||e===a.TokenKind.AMP||e===a.TokenKind.PAREN_L||e===a.TokenKind.PAREN_R||e===a.TokenKind.SPREAD||e===a.TokenKind.COLON||e===a.TokenKind.EQUALS||e===a.TokenKind.AT||e===a.TokenKind.BRACKET_L||e===a.TokenKind.BRACKET_R||e===a.TokenKind.BRACE_L||e===a.TokenKind.PIPE||e===a.TokenKind.BRACE_R},t.Lexer=void 0;var r=n(12),i=n(4),o=n(10),a=n(15),s=function(){function e(e){var t=new i.Token(a.TokenKind.SOF,0,0,0,0,null);this.source=e,this.lastToken=t,this.token=t,this.line=1,this.lineStart=0}var t=e.prototype;return t.advance=function(){return this.lastToken=this.token,this.token=this.lookahead()},t.lookahead=function(){var e=this.token;if(e.kind!==a.TokenKind.EOF)do{var t;e=null!==(t=e.next)&&void 0!==t?t:e.next=c(this,e)}while(e.kind===a.TokenKind.COMMENT);return e},e}();function u(e){return isNaN(e)?a.TokenKind.EOF:e<127?JSON.stringify(String.fromCharCode(e)):'"\\u'.concat(("00"+e.toString(16).toUpperCase()).slice(-4),'"')}function c(e,t){var n=e.source,s=n.body,c=s.length,p=function(e,t,n){var r=e.length,i=t;for(;i<r;){var o=e.charCodeAt(i);if(9===o||32===o||44===o||65279===o)++i;else if(10===o)++i,++n.line,n.lineStart=i;else{if(13!==o)break;10===e.charCodeAt(i+1)?i+=2:++i,++n.line,n.lineStart=i}}return i}(s,t.end,e),d=e.line,h=1+p-e.lineStart;if(p>=c)return new i.Token(a.TokenKind.EOF,c,c,d,h,t);var v=s.charCodeAt(p);switch(v){case 33:return new i.Token(a.TokenKind.BANG,p,p+1,d,h,t);case 35:return function(e,t,n,r,o){var s,u=e.body,c=t;do{s=u.charCodeAt(++c)}while(!isNaN(s)&&(s>31||9===s));return new i.Token(a.TokenKind.COMMENT,t,c,n,r,o,u.slice(t+1,c))}(n,p,d,h,t);case 36:return new i.Token(a.TokenKind.DOLLAR,p,p+1,d,h,t);case 38:return new i.Token(a.TokenKind.AMP,p,p+1,d,h,t);case 40:return new i.Token(a.TokenKind.PAREN_L,p,p+1,d,h,t);case 41:return new i.Token(a.TokenKind.PAREN_R,p,p+1,d,h,t);case 46:if(46===s.charCodeAt(p+1)&&46===s.charCodeAt(p+2))return new i.Token(a.TokenKind.SPREAD,p,p+3,d,h,t);break;case 58:return new i.Token(a.TokenKind.COLON,p,p+1,d,h,t);case 61:return new i.Token(a.TokenKind.EQUALS,p,p+1,d,h,t);case 64:return new i.Token(a.TokenKind.AT,p,p+1,d,h,t);case 91:return new i.Token(a.TokenKind.BRACKET_L,p,p+1,d,h,t);case 93:return new i.Token(a.TokenKind.BRACKET_R,p,p+1,d,h,t);case 123:return new i.Token(a.TokenKind.BRACE_L,p,p+1,d,h,t);case 124:return new i.Token(a.TokenKind.PIPE,p,p+1,d,h,t);case 125:return new i.Token(a.TokenKind.BRACE_R,p,p+1,d,h,t);case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return function(e,t,n,r,o){var s=e.body,u=s.length,c=t+1,l=0;for(;c!==u&&!isNaN(l=s.charCodeAt(c))&&(95===l||l>=48&&l<=57||l>=65&&l<=90||l>=97&&l<=122);)++c;return new i.Token(a.TokenKind.NAME,t,c,n,r,o,s.slice(t,c))}(n,p,d,h,t);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return function(e,t,n,o,s,c){var f=e.body,p=n,d=t,h=!1;45===p&&(p=f.charCodeAt(++d));if(48===p){if((p=f.charCodeAt(++d))>=48&&p<=57)throw(0,r.syntaxError)(e,d,"Invalid number, unexpected digit after 0: ".concat(u(p),"."))}else d=l(e,d,p),p=f.charCodeAt(d);46===p&&(h=!0,p=f.charCodeAt(++d),d=l(e,d,p),p=f.charCodeAt(d));69!==p&&101!==p||(h=!0,43!==(p=f.charCodeAt(++d))&&45!==p||(p=f.charCodeAt(++d)),d=l(e,d,p),p=f.charCodeAt(d));if(46===p||function(e){return 95===e||e>=65&&e<=90||e>=97&&e<=122}(p))throw(0,r.syntaxError)(e,d,"Invalid number, expected digit but got: ".concat(u(p),"."));return new i.Token(h?a.TokenKind.FLOAT:a.TokenKind.INT,t,d,o,s,c,f.slice(t,d))}(n,p,v,d,h,t);case 34:return 34===s.charCodeAt(p+1)&&34===s.charCodeAt(p+2)?function(e,t,n,s,c,l){var f=e.body,p=t+3,d=p,h=0,v="";for(;p<f.length&&!isNaN(h=f.charCodeAt(p));){if(34===h&&34===f.charCodeAt(p+1)&&34===f.charCodeAt(p+2))return v+=f.slice(d,p),new i.Token(a.TokenKind.BLOCK_STRING,t,p+3,n,s,c,(0,o.dedentBlockStringValue)(v));if(h<32&&9!==h&&10!==h&&13!==h)throw(0,r.syntaxError)(e,p,"Invalid character within String: ".concat(u(h),"."));10===h?(++p,++l.line,l.lineStart=p):13===h?(10===f.charCodeAt(p+1)?p+=2:++p,++l.line,l.lineStart=p):92===h&&34===f.charCodeAt(p+1)&&34===f.charCodeAt(p+2)&&34===f.charCodeAt(p+3)?(v+=f.slice(d,p)+'"""',d=p+=4):++p}throw(0,r.syntaxError)(e,p,"Unterminated string.")}(n,p,d,h,t,e):function(e,t,n,o,s){var c=e.body,l=t+1,p=l,d=0,h="";for(;l<c.length&&!isNaN(d=c.charCodeAt(l))&&10!==d&&13!==d;){if(34===d)return h+=c.slice(p,l),new i.Token(a.TokenKind.STRING,t,l+1,n,o,s,h);if(d<32&&9!==d)throw(0,r.syntaxError)(e,l,"Invalid character within String: ".concat(u(d),"."));if(++l,92===d){switch(h+=c.slice(p,l-1),d=c.charCodeAt(l)){case 34:h+='"';break;case 47:h+="/";break;case 92:h+="\\";break;case 98:h+="\b";break;case 102:h+="\f";break;case 110:h+="\n";break;case 114:h+="\r";break;case 116:h+="\t";break;case 117:var v=(b=c.charCodeAt(l+1),m=c.charCodeAt(l+2),O=c.charCodeAt(l+3),g=c.charCodeAt(l+4),f(b)<<12|f(m)<<8|f(O)<<4|f(g));if(v<0){var y=c.slice(l+1,l+5);throw(0,r.syntaxError)(e,l,"Invalid character escape sequence: \\u".concat(y,"."))}h+=String.fromCharCode(v),l+=4;break;default:throw(0,r.syntaxError)(e,l,"Invalid character escape sequence: \\".concat(String.fromCharCode(d),"."))}++l,p=l}}var b,m,O,g;throw(0,r.syntaxError)(e,l,"Unterminated string.")}(n,p,d,h,t)}throw(0,r.syntaxError)(n,p,function(e){if(e<32&&9!==e&&10!==e&&13!==e)return"Cannot contain the invalid character ".concat(u(e),".");if(39===e)return"Unexpected single quote character ('), did you mean to use a double quote (\")?";return"Cannot parse the unexpected character ".concat(u(e),".")}(v))}function l(e,t,n){var i=e.body,o=t,a=n;if(a>=48&&a<=57){do{a=i.charCodeAt(++o)}while(a>=48&&a<=57);return o}throw(0,r.syntaxError)(e,o,"Invalid number, expected digit but got: ".concat(u(a),"."))}function f(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}t.Lexer=s},function(e,t,n){"use strict";var r=this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e};Object.defineProperty(t,"__esModule",{value:!0}),t.LONDON_USERS=void 0;var i,o=n(5);t.LONDON_USERS=o.default(i||(i=r(["\n  query LondonUsers {\n    londonUsers {\n      id\n      first_name\n      last_name\n      email\n      ip_address\n      latitude\n      longitude\n      distance\n      livesInLondon\n    }\n  }\n  "],["\n  query LondonUsers {\n    londonUsers {\n      id\n      first_name\n      last_name\n      email\n      ip_address\n      latitude\n      longitude\n      distance\n      livesInLondon\n    }\n  }\n  "])))},function(e,t,n){},function(e,t,n){"use strict";n.r(t),n.d(t,"ApolloClient",(function(){return B})),n.d(t,"ApolloError",(function(){return R})),n.d(t,"FetchType",(function(){return N})),n.d(t,"NetworkStatus",(function(){return T})),n.d(t,"ObservableQuery",(function(){return D})),n.d(t,"isApolloError",(function(){return I})),n.d(t,"Observable",(function(){return s})),n.d(t,"getOperationName",(function(){return i.n})),n.d(t,"ApolloLink",(function(){return k})),n.d(t,"concat",(function(){return g})),n.d(t,"createOperation",(function(){return h})),n.d(t,"empty",(function(){return b})),n.d(t,"execute",(function(){return E})),n.d(t,"from",(function(){return m})),n.d(t,"fromError",(function(){return d})),n.d(t,"fromPromise",(function(){return p})),n.d(t,"makePromise",(function(){return f})),n.d(t,"split",(function(){return O})),n.d(t,"toPromise",(function(){return l})),n.d(t,"HeuristicFragmentMatcher",(function(){return je})),n.d(t,"InMemoryCache",(function(){return Je})),n.d(t,"IntrospectionFragmentMatcher",(function(){return xe})),n.d(t,"ObjectCache",(function(){return Qe})),n.d(t,"StoreReader",(function(){return De})),n.d(t,"StoreWriter",(function(){return qe})),n.d(t,"WriteError",(function(){return Pe})),n.d(t,"assertIdValue",(function(){return Fe})),n.d(t,"defaultDataIdFromObject",(function(){return Ue})),n.d(t,"defaultNormalizedCacheFactory",(function(){return Me})),n.d(t,"enhanceErrorWithDocument",(function(){return Le})),n.d(t,"HttpLink",(function(){return Ze})),n.d(t,"gql",(function(){return nt.a}));var r=n(0),i=n(1),o=n(7),a=n(18),s=n.n(a).a,u=n(2);!function(e){function t(t,n){var r=e.call(this,t)||this;return r.link=n,r}Object(r.c)(t,e)}(Error);function c(e){return e.request.length<=1}function l(e){var t=!1;return new Promise((function(n,r){e.subscribe({next:function(e){t||(t=!0,n(e))},error:r})}))}var f=l;function p(e){return new s((function(t){e.then((function(e){t.next(e),t.complete()})).catch(t.error.bind(t))}))}function d(e){return new s((function(t){t.error(e)}))}function h(e,t){var n=Object(r.a)({},e);return Object.defineProperty(t,"setContext",{enumerable:!1,value:function(e){n="function"==typeof e?Object(r.a)({},n,e(n)):Object(r.a)({},n,e)}}),Object.defineProperty(t,"getContext",{enumerable:!1,value:function(){return Object(r.a)({},n)}}),Object.defineProperty(t,"toKey",{enumerable:!1,value:function(){return function(e){var t=e.query,n=e.variables,r=e.operationName;return JSON.stringify([r,t,n])}(t)}}),t}function v(e,t){return t?t(e):s.of()}function y(e){return"function"==typeof e?new k(e):e}function b(){return new k((function(){return s.of()}))}function m(e){return 0===e.length?b():e.map(y).reduce((function(e,t){return e.concat(t)}))}function O(e,t,n){var r=y(t),i=y(n||new k(v));return c(r)&&c(i)?new k((function(t){return e(t)?r.request(t)||s.of():i.request(t)||s.of()})):new k((function(t,n){return e(t)?r.request(t,n)||s.of():i.request(t,n)||s.of()}))}var g=function(e,t){var n=y(e);if(c(n))return n;var r=y(t);return c(r)?new k((function(e){return n.request(e,(function(e){return r.request(e)||s.of()}))||s.of()})):new k((function(e,t){return n.request(e,(function(e){return r.request(e,t)||s.of()}))||s.of()}))},k=function(){function e(e){e&&(this.request=e)}return e.prototype.split=function(t,n,r){return this.concat(O(t,n,r||new e(v)))},e.prototype.concat=function(e){return g(this,e)},e.prototype.request=function(e,t){throw new u.a(1)},e.empty=b,e.from=m,e.split=O,e.execute=E,e}();function E(e,t){return e.request(h(t.context,function(e){var t={variables:e.variables||{},extensions:e.extensions||{},operationName:e.operationName,query:e.query};return t.operationName||(t.operationName="string"!=typeof t.query?Object(i.n)(t.query):""),t}(function(e){for(var t=["query","operationName","variables","extensions","context"],n=0,r=Object.keys(e);n<r.length;n++){var i=r[n];if(t.indexOf(i)<0)throw new u.a(2)}return e}(t))))||s.of()}var T,w=n(16),S=n(3);function _(e){return e<7}!function(e){e[e.loading=1]="loading",e[e.setVariables=2]="setVariables",e[e.fetchMore=3]="fetchMore",e[e.refetch=4]="refetch",e[e.poll=6]="poll",e[e.ready=7]="ready",e[e.error=8]="error"}(T||(T={}));var j=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(r.c)(t,e),t.prototype[w.a]=function(){return this},t.prototype["@@observable"]=function(){return this},t}(s);function x(e){return Array.isArray(e)&&e.length>0}function I(e){return e.hasOwnProperty("graphQLErrors")}var N,R=function(e){function t(n){var r,i,o=n.graphQLErrors,a=n.networkError,s=n.errorMessage,u=n.extraInfo,c=e.call(this,s)||this;return c.graphQLErrors=o||[],c.networkError=a||null,c.message=s||(i="",x((r=c).graphQLErrors)&&r.graphQLErrors.forEach((function(e){var t=e?e.message:"Error message not found.";i+="GraphQL error: "+t+"\n"})),r.networkError&&(i+="Network error: "+r.networkError.message+"\n"),i=i.replace(/\n$/,"")),c.extraInfo=u,c.__proto__=t.prototype,c}return Object(r.c)(t,e),t}(Error);!function(e){e[e.normal=1]="normal",e[e.refetch=2]="refetch",e[e.poll=3]="poll"}(N||(N={}));var D=function(e){function t(t){var n=t.queryManager,r=t.options,o=t.shouldSubscribe,a=void 0===o||o,s=e.call(this,(function(e){return s.onSubscribe(e)}))||this;s.observers=new Set,s.subscriptions=new Set,s.isTornDown=!1,s.options=r,s.variables=r.variables||{},s.queryId=n.generateQueryId(),s.shouldSubscribe=a;var u=Object(i.m)(r.query);return s.queryName=u&&u.name&&u.name.value,s.queryManager=n,s}return Object(r.c)(t,e),t.prototype.result=function(){var e=this;return new Promise((function(t,n){var r={next:function(n){t(n),e.observers.delete(r),e.observers.size||e.queryManager.removeQuery(e.queryId),setTimeout((function(){i.unsubscribe()}),0)},error:n},i=e.subscribe(r)}))},t.prototype.currentResult=function(){var e=this.getCurrentResult();return void 0===e.data&&(e.data={}),e},t.prototype.getCurrentResult=function(){if(this.isTornDown){var e=this.lastResult;return{data:!this.lastError&&e&&e.data||void 0,error:this.lastError,loading:!1,networkStatus:T.error}}var t,n,i,o=this.queryManager.getCurrentQueryResult(this),a=o.data,s=o.partial,u=this.queryManager.queryStore.get(this.queryId),c=this.options.fetchPolicy,l="network-only"===c||"no-cache"===c;if(u){var f=u.networkStatus;if(n=u,void 0===(i=this.options.errorPolicy)&&(i="none"),n&&(n.networkError||"none"===i&&x(n.graphQLErrors)))return{data:void 0,loading:!1,networkStatus:f,error:new R({graphQLErrors:u.graphQLErrors,networkError:u.networkError})};u.variables&&(this.options.variables=Object(r.a)(Object(r.a)({},this.options.variables),u.variables),this.variables=this.options.variables),t={data:a,loading:_(f),networkStatus:f},u.graphQLErrors&&"all"===this.options.errorPolicy&&(t.errors=u.graphQLErrors)}else{var p=l||s&&"cache-only"!==c;t={data:a,loading:p,networkStatus:p?T.loading:T.ready}}return s||this.updateLastResult(Object(r.a)(Object(r.a)({},t),{stale:!1})),Object(r.a)(Object(r.a)({},t),{partial:s})},t.prototype.isDifferentFromLastResult=function(e){var t=this.lastResultSnapshot;return!(t&&e&&t.networkStatus===e.networkStatus&&t.stale===e.stale&&Object(o.a)(t.data,e.data))},t.prototype.getLastResult=function(){return this.lastResult},t.prototype.getLastError=function(){return this.lastError},t.prototype.resetLastResults=function(){delete this.lastResult,delete this.lastResultSnapshot,delete this.lastError,this.isTornDown=!1},t.prototype.resetQueryStoreErrors=function(){var e=this.queryManager.queryStore.get(this.queryId);e&&(e.networkError=null,e.graphQLErrors=[])},t.prototype.refetch=function(e){var t=this.options.fetchPolicy;return"cache-only"===t?Promise.reject(new u.a(1)):("no-cache"!==t&&"cache-and-network"!==t&&(t="network-only"),Object(o.a)(this.variables,e)||(this.variables=Object(r.a)(Object(r.a)({},this.variables),e)),Object(o.a)(this.options.variables,this.variables)||(this.options.variables=Object(r.a)(Object(r.a)({},this.options.variables),this.variables)),this.queryManager.fetchQuery(this.queryId,Object(r.a)(Object(r.a)({},this.options),{fetchPolicy:t}),N.refetch))},t.prototype.fetchMore=function(e){var t=this;Object(u.b)(e.updateQuery,2);var n=Object(r.a)(Object(r.a)({},e.query?e:Object(r.a)(Object(r.a)(Object(r.a)({},this.options),e),{variables:Object(r.a)(Object(r.a)({},this.variables),e.variables)})),{fetchPolicy:"network-only"}),i=this.queryManager.generateQueryId();return this.queryManager.fetchQuery(i,n,N.normal,this.queryId).then((function(r){return t.updateQuery((function(t){return e.updateQuery(t,{fetchMoreResult:r.data,variables:n.variables})})),t.queryManager.stopQuery(i),r}),(function(e){throw t.queryManager.stopQuery(i),e}))},t.prototype.subscribeToMore=function(e){var t=this,n=this.queryManager.startGraphQLSubscription({query:e.document,variables:e.variables}).subscribe({next:function(n){var r=e.updateQuery;r&&t.updateQuery((function(e,t){var i=t.variables;return r(e,{subscriptionData:n,variables:i})}))},error:function(t){e.onError&&e.onError(t)}});return this.subscriptions.add(n),function(){t.subscriptions.delete(n)&&n.unsubscribe()}},t.prototype.setOptions=function(e){var t=this.options.fetchPolicy;this.options=Object(r.a)(Object(r.a)({},this.options),e),e.pollInterval?this.startPolling(e.pollInterval):0===e.pollInterval&&this.stopPolling();var n=e.fetchPolicy;return this.setVariables(this.options.variables,t!==n&&("cache-only"===t||"standby"===t||"network-only"===n),e.fetchResults)},t.prototype.setVariables=function(e,t,n){return void 0===t&&(t=!1),void 0===n&&(n=!0),this.isTornDown=!1,e=e||this.variables,!t&&Object(o.a)(e,this.variables)?this.observers.size&&n?this.result():Promise.resolve():(this.variables=this.options.variables=e,this.observers.size?this.queryManager.fetchQuery(this.queryId,this.options):Promise.resolve())},t.prototype.updateQuery=function(e){var t=this.queryManager,n=t.getQueryWithPreviousResult(this.queryId),r=n.previousResult,o=n.variables,a=n.document,s=Object(i.I)((function(){return e(r,{variables:o})}));s&&(t.dataStore.markUpdateQueryResult(a,o,s),t.broadcastQueries())},t.prototype.stopPolling=function(){this.queryManager.stopPollingQuery(this.queryId),this.options.pollInterval=void 0},t.prototype.startPolling=function(e){F(this),this.options.pollInterval=e,this.queryManager.startPollingQuery(this.options,this.queryId)},t.prototype.updateLastResult=function(e){var t=this.lastResult;return this.lastResult=e,this.lastResultSnapshot=this.queryManager.assumeImmutableResults?e:Object(i.f)(e),t},t.prototype.onSubscribe=function(e){var t=this;try{var n=e._subscription._observer;n&&!n.error&&(n.error=A)}catch(e){}var r=!this.observers.size;return this.observers.add(e),e.next&&this.lastResult&&e.next(this.lastResult),e.error&&this.lastError&&e.error(this.lastError),r&&this.setUpQuery(),function(){t.observers.delete(e)&&!t.observers.size&&t.tearDownQuery()}},t.prototype.setUpQuery=function(){var e=this,t=this.queryManager,n=this.queryId;this.shouldSubscribe&&t.addObservableQuery(n,this),this.options.pollInterval&&(F(this),t.startPollingQuery(this.options,n));var i=function(t){e.updateLastResult(Object(r.a)(Object(r.a)({},e.lastResult),{errors:t.graphQLErrors,networkStatus:T.error,loading:!1})),C(e.observers,"error",e.lastError=t)};t.observeQuery(n,this.options,{next:function(n){if(e.lastError||e.isDifferentFromLastResult(n)){var r=e.updateLastResult(n),i=e.options,a=i.query,s=i.variables,u=i.fetchPolicy;t.transform(a).hasClientExports?t.getLocalState().addExportedVariables(a,s).then((function(i){var s=e.variables;e.variables=e.options.variables=i,!n.loading&&r&&"cache-only"!==u&&t.transform(a).serverQuery&&!Object(o.a)(s,i)?e.refetch():C(e.observers,"next",n)})):C(e.observers,"next",n)}},error:i}).catch(i)},t.prototype.tearDownQuery=function(){var e=this.queryManager;this.isTornDown=!0,e.stopPollingQuery(this.queryId),this.subscriptions.forEach((function(e){return e.unsubscribe()})),this.subscriptions.clear(),e.removeObservableQuery(this.queryId),e.stopQuery(this.queryId),this.observers.clear()},t}(j);function A(e){}function C(e,t,n){var r=[];e.forEach((function(e){return e[t]&&r.push(e)})),r.forEach((function(e){return e[t](n)}))}function F(e){var t=e.options.fetchPolicy;Object(u.b)("cache-first"!==t&&"cache-only"!==t,3)}var Q=function(){function e(){this.store={}}return e.prototype.getStore=function(){return this.store},e.prototype.get=function(e){return this.store[e]},e.prototype.initMutation=function(e,t,n){this.store[e]={mutation:t,variables:n||{},loading:!0,error:null}},e.prototype.markMutationError=function(e,t){var n=this.store[e];n&&(n.loading=!1,n.error=t)},e.prototype.markMutationResult=function(e){var t=this.store[e];t&&(t.loading=!1,t.error=null)},e.prototype.reset=function(){this.store={}},e}(),M=function(){function e(){this.store={}}return e.prototype.getStore=function(){return this.store},e.prototype.get=function(e){return this.store[e]},e.prototype.initQuery=function(e){var t=this.store[e.queryId];Object(u.b)(!t||t.document===e.document||Object(o.a)(t.document,e.document),19);var n,r=!1,i=null;e.storePreviousVariables&&t&&t.networkStatus!==T.loading&&(Object(o.a)(t.variables,e.variables)||(r=!0,i=t.variables)),n=r?T.setVariables:e.isPoll?T.poll:e.isRefetch?T.refetch:T.loading;var a=[];t&&t.graphQLErrors&&(a=t.graphQLErrors),this.store[e.queryId]={document:e.document,variables:e.variables,previousVariables:i,networkError:null,graphQLErrors:a,networkStatus:n,metadata:e.metadata},"string"==typeof e.fetchMoreForQueryId&&this.store[e.fetchMoreForQueryId]&&(this.store[e.fetchMoreForQueryId].networkStatus=T.fetchMore)},e.prototype.markQueryResult=function(e,t,n){this.store&&this.store[e]&&(this.store[e].networkError=null,this.store[e].graphQLErrors=x(t.errors)?t.errors:[],this.store[e].previousVariables=null,this.store[e].networkStatus=T.ready,"string"==typeof n&&this.store[n]&&(this.store[n].networkStatus=T.ready))},e.prototype.markQueryError=function(e,t,n){this.store&&this.store[e]&&(this.store[e].networkError=t,this.store[e].networkStatus=T.error,"string"==typeof n&&this.markQueryResultClient(n,!0))},e.prototype.markQueryResultClient=function(e,t){var n=this.store&&this.store[e];n&&(n.networkError=null,n.previousVariables=null,t&&(n.networkStatus=T.ready))},e.prototype.stopQuery=function(e){delete this.store[e]},e.prototype.reset=function(e){var t=this;Object.keys(this.store).forEach((function(n){e.indexOf(n)<0?t.stopQuery(n):t.store[n].networkStatus=T.loading}))},e}();var P=function(){function e(e){var t=e.cache,n=e.client,r=e.resolvers,i=e.fragmentMatcher;this.cache=t,n&&(this.client=n),r&&this.addResolvers(r),i&&this.setFragmentMatcher(i)}return e.prototype.addResolvers=function(e){var t=this;this.resolvers=this.resolvers||{},Array.isArray(e)?e.forEach((function(e){t.resolvers=Object(i.A)(t.resolvers,e)})):this.resolvers=Object(i.A)(this.resolvers,e)},e.prototype.setResolvers=function(e){this.resolvers={},this.addResolvers(e)},e.prototype.getResolvers=function(){return this.resolvers||{}},e.prototype.runResolvers=function(e){var t=e.document,n=e.remoteResult,i=e.context,o=e.variables,a=e.onlyRunForcedResolvers,s=void 0!==a&&a;return Object(r.b)(this,void 0,void 0,(function(){return Object(r.d)(this,(function(e){return t?[2,this.resolveDocument(t,n.data,i,o,this.fragmentMatcher,s).then((function(e){return Object(r.a)(Object(r.a)({},n),{data:e.result})}))]:[2,n]}))}))},e.prototype.setFragmentMatcher=function(e){this.fragmentMatcher=e},e.prototype.getFragmentMatcher=function(){return this.fragmentMatcher},e.prototype.clientQuery=function(e){return Object(i.s)(["client"],e)&&this.resolvers?e:null},e.prototype.serverQuery=function(e){return this.resolvers?Object(i.C)(e):e},e.prototype.prepareContext=function(e){void 0===e&&(e={});var t=this.cache;return Object(r.a)(Object(r.a)({},e),{cache:t,getCacheKey:function(e){if(t.config)return t.config.dataIdFromObject(e);Object(u.b)(!1,6)}})},e.prototype.addExportedVariables=function(e,t,n){return void 0===t&&(t={}),void 0===n&&(n={}),Object(r.b)(this,void 0,void 0,(function(){return Object(r.d)(this,(function(i){return e?[2,this.resolveDocument(e,this.buildRootValueFromCache(e,t)||{},this.prepareContext(n),t).then((function(e){return Object(r.a)(Object(r.a)({},t),e.exportedVariables)}))]:[2,Object(r.a)({},t)]}))}))},e.prototype.shouldForceResolvers=function(e){var t=!1;return Object(S.visit)(e,{Directive:{enter:function(e){if("client"===e.name.value&&e.arguments&&(t=e.arguments.some((function(e){return"always"===e.name.value&&"BooleanValue"===e.value.kind&&!0===e.value.value}))))return S.BREAK}}}),t},e.prototype.buildRootValueFromCache=function(e,t){return this.cache.diff({query:Object(i.d)(e),variables:t,returnPartialData:!0,optimistic:!1}).result},e.prototype.resolveDocument=function(e,t,n,o,a,s){return void 0===n&&(n={}),void 0===o&&(o={}),void 0===a&&(a=function(){return!0}),void 0===s&&(s=!1),Object(r.b)(this,void 0,void 0,(function(){var u,c,l,f,p,d,h,v,y;return Object(r.d)(this,(function(b){var m;return u=Object(i.l)(e),c=Object(i.j)(e),l=Object(i.g)(c),f=u.operation,p=f?(m=f).charAt(0).toUpperCase()+m.slice(1):"Query",h=(d=this).cache,v=d.client,y={fragmentMap:l,context:Object(r.a)(Object(r.a)({},n),{cache:h,client:v}),variables:o,fragmentMatcher:a,defaultOperationType:p,exportedVariables:{},onlyRunForcedResolvers:s},[2,this.resolveSelectionSet(u.selectionSet,t,y).then((function(e){return{result:e,exportedVariables:y.exportedVariables}}))]}))}))},e.prototype.resolveSelectionSet=function(e,t,n){return Object(r.b)(this,void 0,void 0,(function(){var o,a,s,c,l,f=this;return Object(r.d)(this,(function(p){return o=n.fragmentMap,a=n.context,s=n.variables,c=[t],l=function(e){return Object(r.b)(f,void 0,void 0,(function(){var l,f;return Object(r.d)(this,(function(r){return Object(i.F)(e,s)?Object(i.t)(e)?[2,this.resolveField(e,t,n).then((function(t){var n;void 0!==t&&c.push(((n={})[Object(i.E)(e)]=t,n))}))]:(Object(i.v)(e)?l=e:(l=o[e.name.value],Object(u.b)(l,7)),l&&l.typeCondition&&(f=l.typeCondition.name.value,n.fragmentMatcher(t,f,a))?[2,this.resolveSelectionSet(l.selectionSet,t,n).then((function(e){c.push(e)}))]:[2]):[2]}))}))},[2,Promise.all(e.selections.map(l)).then((function(){return Object(i.B)(c)}))]}))}))},e.prototype.resolveField=function(e,t,n){return Object(r.b)(this,void 0,void 0,(function(){var o,a,s,u,c,l,f,p,d,h=this;return Object(r.d)(this,(function(r){return o=n.variables,a=e.name.value,s=Object(i.E)(e),u=a!==s,c=t[s]||t[a],l=Promise.resolve(c),n.onlyRunForcedResolvers&&!this.shouldForceResolvers(e)||(f=t.__typename||n.defaultOperationType,(p=this.resolvers&&this.resolvers[f])&&(d=p[u?a:s])&&(l=Promise.resolve(d(t,Object(i.b)(e,o),n.context,{field:e,fragmentMap:n.fragmentMap})))),[2,l.then((function(t){return void 0===t&&(t=c),e.directives&&e.directives.forEach((function(e){"export"===e.name.value&&e.arguments&&e.arguments.forEach((function(e){"as"===e.name.value&&"StringValue"===e.value.kind&&(n.exportedVariables[e.value.value]=t)}))})),e.selectionSet?null==t?t:Array.isArray(t)?h.resolveSubSelectedArray(e,t,n):e.selectionSet?h.resolveSelectionSet(e.selectionSet,t,n):void 0:t}))]}))}))},e.prototype.resolveSubSelectedArray=function(e,t,n){var r=this;return Promise.all(t.map((function(t){return null===t?null:Array.isArray(t)?r.resolveSubSelectedArray(e,t,n):e.selectionSet?r.resolveSelectionSet(e.selectionSet,t,n):void 0})))},e}();function L(e){var t=new Set,n=null;return new j((function(r){return t.add(r),n=n||e.subscribe({next:function(e){t.forEach((function(t){return t.next&&t.next(e)}))},error:function(e){t.forEach((function(t){return t.error&&t.error(e)}))},complete:function(){t.forEach((function(e){return e.complete&&e.complete()}))}}),function(){t.delete(r)&&!t.size&&n&&(n.unsubscribe(),n=null)}}))}var q=Object.prototype.hasOwnProperty,K=function(){function e(e){var t=e.link,n=e.queryDeduplication,r=void 0!==n&&n,o=e.store,a=e.onBroadcast,s=void 0===a?function(){}:a,u=e.ssrMode,c=void 0!==u&&u,l=e.clientAwareness,f=void 0===l?{}:l,p=e.localState,d=e.assumeImmutableResults;this.mutationStore=new Q,this.queryStore=new M,this.clientAwareness={},this.idCounter=1,this.queries=new Map,this.fetchQueryRejectFns=new Map,this.transformCache=new(i.e?WeakMap:Map),this.inFlightLinkObservables=new Map,this.pollingInfoByQueryId=new Map,this.link=t,this.queryDeduplication=r,this.dataStore=o,this.onBroadcast=s,this.clientAwareness=f,this.localState=p||new P({cache:o.getCache()}),this.ssrMode=c,this.assumeImmutableResults=!!d}return e.prototype.stop=function(){var e=this;this.queries.forEach((function(t,n){e.stopQueryNoBroadcast(n)})),this.fetchQueryRejectFns.forEach((function(e){e(new u.a(8))}))},e.prototype.mutate=function(e){var t=e.mutation,n=e.variables,o=e.optimisticResponse,a=e.updateQueries,s=e.refetchQueries,c=void 0===s?[]:s,l=e.awaitRefetchQueries,f=void 0!==l&&l,p=e.update,d=e.errorPolicy,h=void 0===d?"none":d,v=e.fetchPolicy,y=e.context,b=void 0===y?{}:y;return Object(r.b)(this,void 0,void 0,(function(){var e,s,l,d=this;return Object(r.d)(this,(function(y){switch(y.label){case 0:return Object(u.b)(t,9),Object(u.b)(!v||"no-cache"===v,10),e=this.generateQueryId(),t=this.transform(t).document,this.setQuery(e,(function(){return{document:t}})),n=this.getVariables(t,n),this.transform(t).hasClientExports?[4,this.localState.addExportedVariables(t,n,b)]:[3,2];case 1:n=y.sent(),y.label=2;case 2:return s=function(){var e={};return a&&d.queries.forEach((function(t,n){var r=t.observableQuery;if(r){var i=r.queryName;i&&q.call(a,i)&&(e[n]={updater:a[i],query:d.queryStore.get(n)})}})),e},this.mutationStore.initMutation(e,t,n),this.dataStore.markMutationInit({mutationId:e,document:t,variables:n,updateQueries:s(),update:p,optimisticResponse:o}),this.broadcastQueries(),l=this,[2,new Promise((function(a,u){var d,y;l.getObservableFromLink(t,Object(r.a)(Object(r.a)({},b),{optimisticResponse:o}),n,!1).subscribe({next:function(r){Object(i.q)(r)&&"none"===h?y=new R({graphQLErrors:r.errors}):(l.mutationStore.markMutationResult(e),"no-cache"!==v&&l.dataStore.markMutationResult({mutationId:e,result:r,document:t,variables:n,updateQueries:s(),update:p}),d=r)},error:function(t){l.mutationStore.markMutationError(e,t),l.dataStore.markMutationComplete({mutationId:e,optimisticResponse:o}),l.broadcastQueries(),l.setQuery(e,(function(){return{document:null}})),u(new R({networkError:t}))},complete:function(){if(y&&l.mutationStore.markMutationError(e,y),l.dataStore.markMutationComplete({mutationId:e,optimisticResponse:o}),l.broadcastQueries(),y)u(y);else{"function"==typeof c&&(c=c(d));var t=[];x(c)&&c.forEach((function(e){if("string"==typeof e)l.queries.forEach((function(n){var r=n.observableQuery;r&&r.queryName===e&&t.push(r.refetch())}));else{var n={query:e.query,variables:e.variables,fetchPolicy:"network-only"};e.context&&(n.context=e.context),t.push(l.query(n))}})),Promise.all(f?t:[]).then((function(){l.setQuery(e,(function(){return{document:null}})),"ignore"===h&&d&&Object(i.q)(d)&&delete d.errors,a(d)}))}}})}))]}}))}))},e.prototype.fetchQuery=function(e,t,n,o){return Object(r.b)(this,void 0,void 0,(function(){var a,s,u,c,l,f,p,d,h,v,y,b,m,O,g,k,E,T,w=this;return Object(r.d)(this,(function(S){switch(S.label){case 0:return a=t.metadata,s=void 0===a?null:a,u=t.fetchPolicy,c=void 0===u?"cache-first":u,l=t.context,f=void 0===l?{}:l,p=this.transform(t.query).document,d=this.getVariables(p,t.variables),this.transform(p).hasClientExports?[4,this.localState.addExportedVariables(p,d,f)]:[3,2];case 1:d=S.sent(),S.label=2;case 2:if(t=Object(r.a)(Object(r.a)({},t),{variables:d}),y=v="network-only"===c||"no-cache"===c,v||(b=this.dataStore.getCache().diff({query:p,variables:d,returnPartialData:!0,optimistic:!1}),m=b.complete,O=b.result,y=!m||"cache-and-network"===c,h=O),g=y&&"cache-only"!==c&&"standby"!==c,Object(i.s)(["live"],p)&&(g=!0),k=this.idCounter++,E="no-cache"!==c?this.updateQueryWatch(e,p,t):void 0,this.setQuery(e,(function(){return{document:p,lastRequestId:k,invalidated:!0,cancel:E}})),this.invalidate(o),this.queryStore.initQuery({queryId:e,document:p,storePreviousVariables:g,variables:d,isPoll:n===N.poll,isRefetch:n===N.refetch,metadata:s,fetchMoreForQueryId:o}),this.broadcastQueries(),g){if(T=this.fetchRequest({requestId:k,queryId:e,document:p,options:t,fetchMoreForQueryId:o}).catch((function(t){throw I(t)?t:(k>=w.getQuery(e).lastRequestId&&(w.queryStore.markQueryError(e,t,o),w.invalidate(e),w.invalidate(o),w.broadcastQueries()),new R({networkError:t}))})),"cache-and-network"!==c)return[2,T];T.catch((function(){}))}return this.queryStore.markQueryResultClient(e,!g),this.invalidate(e),this.invalidate(o),this.transform(p).hasForcedResolvers?[2,this.localState.runResolvers({document:p,remoteResult:{data:h},context:f,variables:d,onlyRunForcedResolvers:!0}).then((function(n){return w.markQueryResult(e,n,t,o),w.broadcastQueries(),n}))]:(this.broadcastQueries(),[2,{data:h}])}}))}))},e.prototype.markQueryResult=function(e,t,n,r){var i=n.fetchPolicy,o=n.variables,a=n.errorPolicy;"no-cache"===i?this.setQuery(e,(function(){return{newData:{result:t.data,complete:!0}}})):this.dataStore.markQueryResult(t,this.getQuery(e).document,o,r,"ignore"===a||"all"===a)},e.prototype.queryListenerForObserver=function(e,t,n){var r=this;function i(e,t){if(n[e])try{n[e](t)}catch(e){}}return function(n,o){if(r.invalidate(e,!1),n){var a=r.getQuery(e),s=a.observableQuery,u=a.document,c=s?s.options.fetchPolicy:t.fetchPolicy;if("standby"!==c){var l=_(n.networkStatus),f=s&&s.getLastResult(),p=!(!f||f.networkStatus===n.networkStatus),d=t.returnPartialData||!o&&n.previousVariables||p&&t.notifyOnNetworkStatusChange||"cache-only"===c||"cache-and-network"===c;if(!l||d){var h=x(n.graphQLErrors),v=s&&s.options.errorPolicy||t.errorPolicy||"none";if("none"===v&&h||n.networkError)return i("error",new R({graphQLErrors:n.graphQLErrors,networkError:n.networkError}));try{var y=void 0,b=void 0;if(o)"no-cache"!==c&&"network-only"!==c&&r.setQuery(e,(function(){return{newData:null}})),y=o.result,b=!o.complete;else{var m=s&&s.getLastError(),O="none"!==v&&(m&&m.graphQLErrors)!==n.graphQLErrors;if(f&&f.data&&!O)y=f.data,b=!1;else{var g=r.dataStore.getCache().diff({query:u,variables:n.previousVariables||n.variables,returnPartialData:!0,optimistic:!0});y=g.result,b=!g.complete}}var k=b&&!(t.returnPartialData||"cache-only"===c),E={data:k?f&&f.data:y,loading:l,networkStatus:n.networkStatus,stale:k};"all"===v&&h&&(E.errors=n.graphQLErrors),i("next",E)}catch(e){i("error",new R({networkError:e}))}}}}}},e.prototype.transform=function(e){var t=this.transformCache;if(!t.has(e)){var n=this.dataStore.getCache(),r=n.transformDocument(e),o=Object(i.D)(n.transformForLink(r)),a=this.localState.clientQuery(r),s=this.localState.serverQuery(o),u={document:r,hasClientExports:Object(i.r)(r),hasForcedResolvers:this.localState.shouldForceResolvers(r),clientQuery:a,serverQuery:s,defaultVars:Object(i.h)(Object(i.m)(r))},c=function(e){e&&!t.has(e)&&t.set(e,u)};c(e),c(r),c(a),c(s)}return t.get(e)},e.prototype.getVariables=function(e,t){return Object(r.a)(Object(r.a)({},this.transform(e).defaultVars),t)},e.prototype.watchQuery=function(e,t){void 0===t&&(t=!0),Object(u.b)("standby"!==e.fetchPolicy,11),e.variables=this.getVariables(e.query,e.variables),void 0===e.notifyOnNetworkStatusChange&&(e.notifyOnNetworkStatusChange=!1);var n=Object(r.a)({},e);return new D({queryManager:this,options:n,shouldSubscribe:t})},e.prototype.query=function(e){var t=this;return Object(u.b)(e.query,12),Object(u.b)("Document"===e.query.kind,13),Object(u.b)(!e.returnPartialData,14),Object(u.b)(!e.pollInterval,15),new Promise((function(n,r){var i=t.watchQuery(e,!1);t.fetchQueryRejectFns.set("query:"+i.queryId,r),i.result().then(n,r).then((function(){return t.fetchQueryRejectFns.delete("query:"+i.queryId)}))}))},e.prototype.generateQueryId=function(){return String(this.idCounter++)},e.prototype.stopQueryInStore=function(e){this.stopQueryInStoreNoBroadcast(e),this.broadcastQueries()},e.prototype.stopQueryInStoreNoBroadcast=function(e){this.stopPollingQuery(e),this.queryStore.stopQuery(e),this.invalidate(e)},e.prototype.addQueryListener=function(e,t){this.setQuery(e,(function(e){return e.listeners.add(t),{invalidated:!1}}))},e.prototype.updateQueryWatch=function(e,t,n){var r=this,i=this.getQuery(e).cancel;i&&i();return this.dataStore.getCache().watch({query:t,variables:n.variables,optimistic:!0,previousResult:function(){var t=null,n=r.getQuery(e).observableQuery;if(n){var i=n.getLastResult();i&&(t=i.data)}return t},callback:function(t){r.setQuery(e,(function(){return{invalidated:!0,newData:t}}))}})},e.prototype.addObservableQuery=function(e,t){this.setQuery(e,(function(){return{observableQuery:t}}))},e.prototype.removeObservableQuery=function(e){var t=this.getQuery(e).cancel;this.setQuery(e,(function(){return{observableQuery:null}})),t&&t()},e.prototype.clearStore=function(){this.fetchQueryRejectFns.forEach((function(e){e(new u.a(16))}));var e=[];return this.queries.forEach((function(t,n){t.observableQuery&&e.push(n)})),this.queryStore.reset(e),this.mutationStore.reset(),this.dataStore.reset()},e.prototype.resetStore=function(){var e=this;return this.clearStore().then((function(){return e.reFetchObservableQueries()}))},e.prototype.reFetchObservableQueries=function(e){var t=this;void 0===e&&(e=!1);var n=[];return this.queries.forEach((function(r,i){var o=r.observableQuery;if(o){var a=o.options.fetchPolicy;o.resetLastResults(),"cache-only"===a||!e&&"standby"===a||n.push(o.refetch()),t.setQuery(i,(function(){return{newData:null}})),t.invalidate(i)}})),this.broadcastQueries(),Promise.all(n)},e.prototype.observeQuery=function(e,t,n){return this.addQueryListener(e,this.queryListenerForObserver(e,t,n)),this.fetchQuery(e,t)},e.prototype.startQuery=function(e,t,n){return this.addQueryListener(e,n),this.fetchQuery(e,t).catch((function(){})),e},e.prototype.startGraphQLSubscription=function(e){var t=this,n=e.query,r=e.fetchPolicy,o=e.variables;n=this.transform(n).document,o=this.getVariables(n,o);var a=function(e){return t.getObservableFromLink(n,{},e,!1).map((function(o){if(r&&"no-cache"===r||(t.dataStore.markSubscriptionResult(o,n,e),t.broadcastQueries()),Object(i.q)(o))throw new R({graphQLErrors:o.errors});return o}))};if(this.transform(n).hasClientExports){var s=this.localState.addExportedVariables(n,o).then(a);return new j((function(e){var t=null;return s.then((function(n){return t=n.subscribe(e)}),e.error),function(){return t&&t.unsubscribe()}}))}return a(o)},e.prototype.stopQuery=function(e){this.stopQueryNoBroadcast(e),this.broadcastQueries()},e.prototype.stopQueryNoBroadcast=function(e){this.stopQueryInStoreNoBroadcast(e),this.removeQuery(e)},e.prototype.removeQuery=function(e){this.fetchQueryRejectFns.delete("query:"+e),this.fetchQueryRejectFns.delete("fetchRequest:"+e),this.getQuery(e).subscriptions.forEach((function(e){return e.unsubscribe()})),this.queries.delete(e)},e.prototype.getCurrentQueryResult=function(e,t){void 0===t&&(t=!0);var n=e.options,r=n.variables,i=n.query,o=n.fetchPolicy,a=n.returnPartialData,s=e.getLastResult(),u=this.getQuery(e.queryId).newData;if(u&&u.complete)return{data:u.result,partial:!1};if("no-cache"===o||"network-only"===o)return{data:void 0,partial:!1};var c=this.dataStore.getCache().diff({query:i,variables:r,previousResult:s?s.data:void 0,returnPartialData:!0,optimistic:t}),l=c.result,f=c.complete;return{data:f||a?l:void 0,partial:!f}},e.prototype.getQueryWithPreviousResult=function(e){var t;if("string"==typeof e){var n=this.getQuery(e).observableQuery;Object(u.b)(n,17),t=n}else t=e;var r=t.options,i=r.variables,o=r.query;return{previousResult:this.getCurrentQueryResult(t,!1).data,variables:i,document:o}},e.prototype.broadcastQueries=function(){var e=this;this.onBroadcast(),this.queries.forEach((function(t,n){t.invalidated&&t.listeners.forEach((function(r){r&&r(e.queryStore.get(n),t.newData)}))}))},e.prototype.getLocalState=function(){return this.localState},e.prototype.getObservableFromLink=function(e,t,n,o){var a,s=this;void 0===o&&(o=this.queryDeduplication);var u=this.transform(e).serverQuery;if(u){var c=this.inFlightLinkObservables,l=this.link,f={query:u,variables:n,operationName:Object(i.n)(u)||void 0,context:this.prepareContext(Object(r.a)(Object(r.a)({},t),{forceFetch:!o}))};if(t=f.context,o){var p=c.get(u)||new Map;c.set(u,p);var d=JSON.stringify(n);if(!(a=p.get(d))){p.set(d,a=L(E(l,f)));var h=function(){p.delete(d),p.size||c.delete(u),v.unsubscribe()},v=a.subscribe({next:h,error:h,complete:h})}}else a=L(E(l,f))}else a=j.of({data:{}}),t=this.prepareContext(t);var y=this.transform(e).clientQuery;return y&&(a=function(e,t){return new j((function(n){var r=n.next,i=n.error,o=n.complete,a=0,s=!1,u={next:function(e){++a,new Promise((function(n){n(t(e))})).then((function(e){--a,r&&r.call(n,e),s&&u.complete()}),(function(e){--a,i&&i.call(n,e)}))},error:function(e){i&&i.call(n,e)},complete:function(){s=!0,a||o&&o.call(n)}},c=e.subscribe(u);return function(){return c.unsubscribe()}}))}(a,(function(e){return s.localState.runResolvers({document:y,remoteResult:e,context:t,variables:n})}))),a},e.prototype.fetchRequest=function(e){var t,n,r=this,i=e.requestId,o=e.queryId,a=e.document,s=e.options,u=e.fetchMoreForQueryId,c=s.variables,l=s.errorPolicy,f=void 0===l?"none":l,p=s.fetchPolicy;return new Promise((function(e,l){var d=r.getObservableFromLink(a,s.context,c),h="fetchRequest:"+o;r.fetchQueryRejectFns.set(h,l);var v=function(){r.fetchQueryRejectFns.delete(h),r.setQuery(o,(function(e){e.subscriptions.delete(y)}))},y=d.map((function(e){if(i>=r.getQuery(o).lastRequestId&&(r.markQueryResult(o,e,s,u),r.queryStore.markQueryResult(o,e,u),r.invalidate(o),r.invalidate(u),r.broadcastQueries()),"none"===f&&x(e.errors))return l(new R({graphQLErrors:e.errors}));if("all"===f&&(n=e.errors),u||"no-cache"===p)t=e.data;else{var d=r.dataStore.getCache().diff({variables:c,query:a,optimistic:!1,returnPartialData:!0}),h=d.result;(d.complete||s.returnPartialData)&&(t=h)}})).subscribe({error:function(e){v(),l(e)},complete:function(){v(),e({data:t,errors:n,loading:!1,networkStatus:T.ready,stale:!1})}});r.setQuery(o,(function(e){e.subscriptions.add(y)}))}))},e.prototype.getQuery=function(e){return this.queries.get(e)||{listeners:new Set,invalidated:!1,document:null,newData:null,lastRequestId:1,observableQuery:null,subscriptions:new Set}},e.prototype.setQuery=function(e,t){var n=this.getQuery(e),i=Object(r.a)(Object(r.a)({},n),t(n));this.queries.set(e,i)},e.prototype.invalidate=function(e,t){void 0===t&&(t=!0),e&&this.setQuery(e,(function(){return{invalidated:t}}))},e.prototype.prepareContext=function(e){void 0===e&&(e={});var t=this.localState.prepareContext(e);return Object(r.a)(Object(r.a)({},t),{clientAwareness:this.clientAwareness})},e.prototype.checkInFlight=function(e){var t=this.queryStore.get(e);return t&&t.networkStatus!==T.ready&&t.networkStatus!==T.error},e.prototype.startPollingQuery=function(e,t,n){var i=this,o=e.pollInterval;if(Object(u.b)(o,18),!this.ssrMode){var a=this.pollingInfoByQueryId.get(t);a||this.pollingInfoByQueryId.set(t,a={}),a.interval=o,a.options=Object(r.a)(Object(r.a)({},e),{fetchPolicy:"network-only"});var s=function(){var e=i.pollingInfoByQueryId.get(t);e&&(i.checkInFlight(t)?c():i.fetchQuery(t,e.options,N.poll).then(c,c))},c=function(){var e=i.pollingInfoByQueryId.get(t);e&&(clearTimeout(e.timeout),e.timeout=setTimeout(s,e.interval))};n&&this.addQueryListener(t,n),c()}return t},e.prototype.stopPollingQuery=function(e){this.pollingInfoByQueryId.delete(e)},e}(),V=function(){function e(e){this.cache=e}return e.prototype.getCache=function(){return this.cache},e.prototype.markQueryResult=function(e,t,n,r,o){void 0===o&&(o=!1);var a=!Object(i.q)(e);o&&Object(i.q)(e)&&e.data&&(a=!0),!r&&a&&this.cache.write({result:e.data,dataId:"ROOT_QUERY",query:t,variables:n})},e.prototype.markSubscriptionResult=function(e,t,n){Object(i.q)(e)||this.cache.write({result:e.data,dataId:"ROOT_SUBSCRIPTION",query:t,variables:n})},e.prototype.markMutationInit=function(e){var t,n=this;e.optimisticResponse&&(t="function"==typeof e.optimisticResponse?e.optimisticResponse(e.variables):e.optimisticResponse,this.cache.recordOptimisticTransaction((function(r){var i=n.cache;n.cache=r;try{n.markMutationResult({mutationId:e.mutationId,result:{data:t},document:e.document,variables:e.variables,updateQueries:e.updateQueries,update:e.update})}finally{n.cache=i}}),e.mutationId))},e.prototype.markMutationResult=function(e){var t=this;if(!Object(i.q)(e.result)){var n=[{result:e.result.data,dataId:"ROOT_MUTATION",query:e.document,variables:e.variables}],r=e.updateQueries;r&&Object.keys(r).forEach((function(o){var a=r[o],s=a.query,u=a.updater,c=t.cache.diff({query:s.document,variables:s.variables,returnPartialData:!0,optimistic:!1}),l=c.result;if(c.complete){var f=Object(i.I)((function(){return u(l,{mutationResult:e.result,queryName:Object(i.n)(s.document)||void 0,queryVariables:s.variables})}));f&&n.push({result:f,dataId:"ROOT_QUERY",query:s.document,variables:s.variables})}})),this.cache.performTransaction((function(t){n.forEach((function(e){return t.write(e)}));var r=e.update;r&&Object(i.I)((function(){return r(t,e.result)}))}))}},e.prototype.markMutationComplete=function(e){var t=e.mutationId;e.optimisticResponse&&this.cache.removeOptimistic(t)},e.prototype.markUpdateQueryResult=function(e,t,n){this.cache.write({result:n,dataId:"ROOT_QUERY",variables:t,query:e})},e.prototype.reset=function(){return this.cache.reset()},e}(),B=function(){function e(e){var t=this;this.defaultOptions={},this.resetStoreCallbacks=[],this.clearStoreCallbacks=[];var n=e.cache,r=e.ssrMode,i=void 0!==r&&r,o=e.ssrForceFetchDelay,a=void 0===o?0:o,s=e.connectToDevTools,c=e.queryDeduplication,l=void 0===c||c,f=e.defaultOptions,p=e.assumeImmutableResults,d=void 0!==p&&p,h=e.resolvers,v=e.typeDefs,y=e.fragmentMatcher,b=e.name,m=e.version,O=e.link;if(!O&&h&&(O=k.empty()),!O||!n)throw new u.a(4);this.link=O,this.cache=n,this.store=new V(n),this.disableNetworkFetches=i||a>0,this.queryDeduplication=l,this.defaultOptions=f||{},this.typeDefs=v,a&&setTimeout((function(){return t.disableNetworkFetches=!1}),a),this.watchQuery=this.watchQuery.bind(this),this.query=this.query.bind(this),this.mutate=this.mutate.bind(this),this.resetStore=this.resetStore.bind(this),this.reFetchObservableQueries=this.reFetchObservableQueries.bind(this);void 0!==s&&(s&&"undefined"!=typeof window)&&(window.__APOLLO_CLIENT__=this),this.version="2.6.10",this.localState=new P({cache:n,client:this,resolvers:h,fragmentMatcher:y}),this.queryManager=new K({link:this.link,store:this.store,queryDeduplication:l,ssrMode:i,clientAwareness:{name:b,version:m},localState:this.localState,assumeImmutableResults:d,onBroadcast:function(){t.devToolsHookCb&&t.devToolsHookCb({action:{},state:{queries:t.queryManager.queryStore.getStore(),mutations:t.queryManager.mutationStore.getStore()},dataWithOptimisticResults:t.cache.extract(!0)})}})}return e.prototype.stop=function(){this.queryManager.stop()},e.prototype.watchQuery=function(e){return this.defaultOptions.watchQuery&&(e=Object(r.a)(Object(r.a)({},this.defaultOptions.watchQuery),e)),!this.disableNetworkFetches||"network-only"!==e.fetchPolicy&&"cache-and-network"!==e.fetchPolicy||(e=Object(r.a)(Object(r.a)({},e),{fetchPolicy:"cache-first"})),this.queryManager.watchQuery(e)},e.prototype.query=function(e){return this.defaultOptions.query&&(e=Object(r.a)(Object(r.a)({},this.defaultOptions.query),e)),Object(u.b)("cache-and-network"!==e.fetchPolicy,5),this.disableNetworkFetches&&"network-only"===e.fetchPolicy&&(e=Object(r.a)(Object(r.a)({},e),{fetchPolicy:"cache-first"})),this.queryManager.query(e)},e.prototype.mutate=function(e){return this.defaultOptions.mutate&&(e=Object(r.a)(Object(r.a)({},this.defaultOptions.mutate),e)),this.queryManager.mutate(e)},e.prototype.subscribe=function(e){return this.queryManager.startGraphQLSubscription(e)},e.prototype.readQuery=function(e,t){return void 0===t&&(t=!1),this.cache.readQuery(e,t)},e.prototype.readFragment=function(e,t){return void 0===t&&(t=!1),this.cache.readFragment(e,t)},e.prototype.writeQuery=function(e){var t=this.cache.writeQuery(e);return this.queryManager.broadcastQueries(),t},e.prototype.writeFragment=function(e){var t=this.cache.writeFragment(e);return this.queryManager.broadcastQueries(),t},e.prototype.writeData=function(e){var t=this.cache.writeData(e);return this.queryManager.broadcastQueries(),t},e.prototype.__actionHookForDevTools=function(e){this.devToolsHookCb=e},e.prototype.__requestRaw=function(e){return E(this.link,e)},e.prototype.initQueryManager=function(){return this.queryManager},e.prototype.resetStore=function(){var e=this;return Promise.resolve().then((function(){return e.queryManager.clearStore()})).then((function(){return Promise.all(e.resetStoreCallbacks.map((function(e){return e()})))})).then((function(){return e.reFetchObservableQueries()}))},e.prototype.clearStore=function(){var e=this;return Promise.resolve().then((function(){return e.queryManager.clearStore()})).then((function(){return Promise.all(e.clearStoreCallbacks.map((function(e){return e()})))}))},e.prototype.onResetStore=function(e){var t=this;return this.resetStoreCallbacks.push(e),function(){t.resetStoreCallbacks=t.resetStoreCallbacks.filter((function(t){return t!==e}))}},e.prototype.onClearStore=function(e){var t=this;return this.clearStoreCallbacks.push(e),function(){t.clearStoreCallbacks=t.clearStoreCallbacks.filter((function(t){return t!==e}))}},e.prototype.reFetchObservableQueries=function(e){return this.queryManager.reFetchObservableQueries(e)},e.prototype.extract=function(e){return this.cache.extract(e)},e.prototype.restore=function(e){return this.cache.restore(e)},e.prototype.addResolvers=function(e){this.localState.addResolvers(e)},e.prototype.setResolvers=function(e){this.localState.setResolvers(e)},e.prototype.getResolvers=function(){return this.localState.getResolvers()},e.prototype.setLocalStateFragmentMatcher=function(e){this.localState.setFragmentMatcher(e)},e}(),U=B;function G(e){return{kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GeneratedClientQuery"},selectionSet:Y(e)}]}}function Y(e){if("number"==typeof e||"boolean"==typeof e||"string"==typeof e||null==e)return null;if(Array.isArray(e))return Y(e[0]);var t=[];return Object.keys(e).forEach((function(n){var r={kind:"Field",name:{kind:"Name",value:n},selectionSet:Y(e[n])||void 0};t.push(r)})),{kind:"SelectionSet",selections:t}}var J,z={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:null,variableDefinitions:null,directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:null,name:{kind:"Name",value:"__typename"},arguments:[],directives:[],selectionSet:null}]}}]},W=function(){function e(){}return e.prototype.transformDocument=function(e){return e},e.prototype.transformForLink=function(e){return e},e.prototype.readQuery=function(e,t){return void 0===t&&(t=!1),this.read({query:e.query,variables:e.variables,optimistic:t})},e.prototype.readFragment=function(e,t){return void 0===t&&(t=!1),this.read({query:Object(i.k)(e.fragment,e.fragmentName),variables:e.variables,rootId:e.id,optimistic:t})},e.prototype.writeQuery=function(e){this.write({dataId:"ROOT_QUERY",result:e.data,query:e.query,variables:e.variables})},e.prototype.writeFragment=function(e){this.write({dataId:e.id,result:e.data,variables:e.variables,query:Object(i.k)(e.fragment,e.fragmentName)})},e.prototype.writeData=function(e){var t,n,r=e.id,i=e.data;if(void 0!==r){var o=null;try{o=this.read({rootId:r,optimistic:!1,query:z})}catch(e){}var a=o&&o.__typename||"__ClientData",s=Object.assign({__typename:a},i);this.writeFragment({id:r,fragment:(t=s,n=a,{kind:"Document",definitions:[{kind:"FragmentDefinition",typeCondition:{kind:"NamedType",name:{kind:"Name",value:n||"__FakeType"}},name:{kind:"Name",value:"GeneratedClientQuery"},selectionSet:Y(t)}]}),data:s})}else this.writeQuery({query:G(i),data:i})},e}();J||(J={});var H=null,X={},$=1,Z=Array,ee=Z["@wry/context:Slot"]||function(){var e=function(){function e(){this.id=["slot",$++,Date.now(),Math.random().toString(36).slice(2)].join(":")}return e.prototype.hasValue=function(){for(var e=H;e;e=e.parent)if(this.id in e.slots){var t=e.slots[this.id];if(t===X)break;return e!==H&&(H.slots[this.id]=t),!0}return H&&(H.slots[this.id]=X),!1},e.prototype.getValue=function(){if(this.hasValue())return H.slots[this.id]},e.prototype.withValue=function(e,t,n,r){var i,o=((i={__proto__:null})[this.id]=e,i),a=H;H={parent:a,slots:o};try{return t.apply(r,n)}finally{H=a}},e.bind=function(e){var t=H;return function(){var n=H;try{return H=t,e.apply(this,arguments)}finally{H=n}}},e.noContext=function(e,t,n){if(!H)return e.apply(n,t);var r=H;try{return H=null,e.apply(n,t)}finally{H=r}},e}();try{Object.defineProperty(Z,"@wry/context:Slot",{value:Z["@wry/context:Slot"]=e,enumerable:!1,writable:!1,configurable:!1})}finally{return e}}();ee.bind,ee.noContext;function te(){}var ne=function(){function e(e,t){void 0===e&&(e=1/0),void 0===t&&(t=te),this.max=e,this.dispose=t,this.map=new Map,this.newest=null,this.oldest=null}return e.prototype.has=function(e){return this.map.has(e)},e.prototype.get=function(e){var t=this.getEntry(e);return t&&t.value},e.prototype.getEntry=function(e){var t=this.map.get(e);if(t&&t!==this.newest){var n=t.older,r=t.newer;r&&(r.older=n),n&&(n.newer=r),t.older=this.newest,t.older.newer=t,t.newer=null,this.newest=t,t===this.oldest&&(this.oldest=r)}return t},e.prototype.set=function(e,t){var n=this.getEntry(e);return n?n.value=t:(n={key:e,value:t,newer:null,older:this.newest},this.newest&&(this.newest.newer=n),this.newest=n,this.oldest=this.oldest||n,this.map.set(e,n),n.value)},e.prototype.clean=function(){for(;this.oldest&&this.map.size>this.max;)this.delete(this.oldest.key)},e.prototype.delete=function(e){var t=this.map.get(e);return!!t&&(t===this.newest&&(this.newest=t.older),t===this.oldest&&(this.oldest=t.newer),t.newer&&(t.newer.older=t.older),t.older&&(t.older.newer=t.newer),this.map.delete(e),this.dispose(t.value,e),!0)},e}(),re=new ee,ie=[],oe=[];function ae(e,t){if(!e)throw new Error(t||"assertion failure")}function se(e){switch(e.length){case 0:throw new Error("unknown value");case 1:return e[0];case 2:throw e[1]}}var ue=function(){function e(t,n){this.fn=t,this.args=n,this.parents=new Set,this.childValues=new Map,this.dirtyChildren=null,this.dirty=!0,this.recomputing=!1,this.value=[],++e.count}return e.prototype.recompute=function(){if(ae(!this.recomputing,"already recomputing"),function(e){var t=re.getValue();if(t)return e.parents.add(t),t.childValues.has(e)||t.childValues.set(e,[]),le(e)?de(t,e):he(t,e),t}(this)||!ye(this))return le(this)?function(e){var t=be(e);re.withValue(e,ce,[e]),function(e){if("function"==typeof e.subscribe)try{Oe(e),e.unsubscribe=e.subscribe.apply(null,e.args)}catch(t){return e.setDirty(),!1}return!0}(e)&&function(e){if(e.dirty=!1,le(e))return;pe(e)}(e);return t.forEach(ye),se(e.value)}(this):se(this.value)},e.prototype.setDirty=function(){this.dirty||(this.dirty=!0,this.value.length=0,fe(this),Oe(this))},e.prototype.dispose=function(){var e=this;be(this).forEach(ye),Oe(this),this.parents.forEach((function(t){t.setDirty(),me(t,e)}))},e.count=0,e}();function ce(e){e.recomputing=!0,e.value.length=0;try{e.value[0]=e.fn.apply(null,e.args)}catch(t){e.value[1]=t}e.recomputing=!1}function le(e){return e.dirty||!(!e.dirtyChildren||!e.dirtyChildren.size)}function fe(e){e.parents.forEach((function(t){return de(t,e)}))}function pe(e){e.parents.forEach((function(t){return he(t,e)}))}function de(e,t){if(ae(e.childValues.has(t)),ae(le(t)),e.dirtyChildren){if(e.dirtyChildren.has(t))return}else e.dirtyChildren=oe.pop()||new Set;e.dirtyChildren.add(t),fe(e)}function he(e,t){ae(e.childValues.has(t)),ae(!le(t));var n,r,i,o=e.childValues.get(t);0===o.length?e.childValues.set(t,t.value.slice(0)):(n=o,r=t.value,(i=n.length)>0&&i===r.length&&n[i-1]===r[i-1]||e.setDirty()),ve(e,t),le(e)||pe(e)}function ve(e,t){var n=e.dirtyChildren;n&&(n.delete(t),0===n.size&&(oe.length<100&&oe.push(n),e.dirtyChildren=null))}function ye(e){return 0===e.parents.size&&"function"==typeof e.reportOrphan&&!0===e.reportOrphan()}function be(e){var t=ie;return e.childValues.size>0&&(t=[],e.childValues.forEach((function(n,r){me(e,r),t.push(r)}))),ae(null===e.dirtyChildren),t}function me(e,t){t.parents.delete(e),e.childValues.delete(t),ve(e,t)}function Oe(e){var t=e.unsubscribe;"function"==typeof t&&(e.unsubscribe=void 0,t())}var ge=function(){function e(e){this.weakness=e}return e.prototype.lookup=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.lookupArray(e)},e.prototype.lookupArray=function(e){var t=this;return e.forEach((function(e){return t=t.getChildTrie(e)})),t.data||(t.data=Object.create(null))},e.prototype.getChildTrie=function(t){var n=this.weakness&&function(e){switch(typeof e){case"object":if(null===e)break;case"function":return!0}return!1}(t)?this.weak||(this.weak=new WeakMap):this.strong||(this.strong=new Map),r=n.get(t);return r||n.set(t,r=new e(this.weakness)),r},e}();var ke=new ge("function"==typeof WeakMap);function Ee(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return ke.lookupArray(e)}var Te=new Set;function we(e,t){void 0===t&&(t=Object.create(null));var n=new ne(t.max||Math.pow(2,16),(function(e){return e.dispose()})),r=!!t.disposable,i=t.makeCacheKey||Ee;function o(){if(!r||re.hasValue()){var o=i.apply(null,arguments);if(void 0===o)return e.apply(null,arguments);var a=Array.prototype.slice.call(arguments),s=n.get(o);s?s.args=a:(s=new ue(e,a),n.set(o,s),s.subscribe=t.subscribe,r&&(s.reportOrphan=function(){return n.delete(o)}));var u=s.recompute();return n.set(o,s),Te.add(n),re.hasValue()||(Te.forEach((function(e){return e.clean()})),Te.clear()),r?void 0:u}}return o.dirty=function(){var e=i.apply(null,arguments),t=void 0!==e&&n.get(e);t&&t.setDirty()},o}var Se=!1;function _e(){var e=!Se;return Object(i.y)()||(Se=!0),e}var je=function(){function e(){}return e.prototype.ensureReady=function(){return Promise.resolve()},e.prototype.canBypassInit=function(){return!0},e.prototype.match=function(e,t,n){var r=n.store.get(e.id),i="ROOT_QUERY"===e.id;if(!r)return i;var o=r.__typename,a=void 0===o?i&&"Query":o;return a&&a===t||(_e(),"heuristic")},e}(),xe=function(){function e(e){e&&e.introspectionQueryResultData?(this.possibleTypesMap=this.parseIntrospectionResult(e.introspectionQueryResultData),this.isReady=!0):this.isReady=!1,this.match=this.match.bind(this)}return e.prototype.match=function(e,t,n){Object(u.b)(this.isReady,1);var r=n.store.get(e.id),i="ROOT_QUERY"===e.id;if(!r)return i;var o=r.__typename,a=void 0===o?i&&"Query":o;if(Object(u.b)(a,2),a===t)return!0;var s=this.possibleTypesMap[t];return!!(a&&s&&s.indexOf(a)>-1)},e.prototype.parseIntrospectionResult=function(e){var t={};return e.__schema.types.forEach((function(e){"UNION"!==e.kind&&"INTERFACE"!==e.kind||(t[e.name]=e.possibleTypes.map((function(e){return e.name})))})),t},e}(),Ie=Object.prototype.hasOwnProperty,Ne=function(){function e(e){var t=this;void 0===e&&(e=Object.create(null)),this.data=e,this.depend=we((function(e){return t.data[e]}),{disposable:!0,makeCacheKey:function(e){return e}})}return e.prototype.toObject=function(){return this.data},e.prototype.get=function(e){return this.depend(e),this.data[e]},e.prototype.set=function(e,t){t!==this.data[e]&&(this.data[e]=t,this.depend.dirty(e))},e.prototype.delete=function(e){Ie.call(this.data,e)&&(delete this.data[e],this.depend.dirty(e))},e.prototype.clear=function(){this.replace(null)},e.prototype.replace=function(e){var t=this;e?(Object.keys(e).forEach((function(n){t.set(n,e[n])})),Object.keys(this.data).forEach((function(n){Ie.call(e,n)||t.delete(n)}))):Object.keys(this.data).forEach((function(e){t.delete(e)}))},e}();function Re(e){return new Ne(e)}var De=function(){function e(e){var t=this,n=void 0===e?{}:e,r=n.cacheKeyRoot,o=void 0===r?new ge(i.e):r,a=n.freezeResults,s=void 0!==a&&a,u=this.executeStoreQuery,c=this.executeSelectionSet,l=this.executeSubSelectedArray;this.freezeResults=s,this.executeStoreQuery=we((function(e){return u.call(t,e)}),{makeCacheKey:function(e){var t=e.query,n=e.rootValue,r=e.contextValue,i=e.variableValues,a=e.fragmentMatcher;if(r.store instanceof Ne)return o.lookup(r.store,t,a,JSON.stringify(i),n.id)}}),this.executeSelectionSet=we((function(e){return c.call(t,e)}),{makeCacheKey:function(e){var t=e.selectionSet,n=e.rootValue,r=e.execContext;if(r.contextValue.store instanceof Ne)return o.lookup(r.contextValue.store,t,r.fragmentMatcher,JSON.stringify(r.variableValues),n.id)}}),this.executeSubSelectedArray=we((function(e){return l.call(t,e)}),{makeCacheKey:function(e){var t=e.field,n=e.array,r=e.execContext;if(r.contextValue.store instanceof Ne)return o.lookup(r.contextValue.store,t,n,JSON.stringify(r.variableValues))}})}return e.prototype.readQueryFromStore=function(e){return this.diffQueryAgainstStore(Object(r.a)(Object(r.a)({},e),{returnPartialData:!1})).result},e.prototype.diffQueryAgainstStore=function(e){var t=e.store,n=e.query,r=e.variables,a=e.previousResult,s=e.returnPartialData,c=void 0===s||s,l=e.rootId,f=void 0===l?"ROOT_QUERY":l,p=e.fragmentMatcherFunction,d=e.config,h=Object(i.o)(n);r=Object(i.c)({},Object(i.h)(h),r);var v={store:t,dataIdFromObject:d&&d.dataIdFromObject,cacheRedirects:d&&d.cacheRedirects||{}},y=this.executeStoreQuery({query:n,rootValue:{type:"id",id:f,generated:!0,typename:"Query"},contextValue:v,variableValues:r,fragmentMatcher:p}),b=y.missing&&y.missing.length>0;return b&&!c&&y.missing.forEach((function(e){if(!e.tolerable)throw new u.a(8)})),a&&Object(o.a)(a,y.result)&&(y.result=a),{result:y.result,complete:!b}},e.prototype.executeStoreQuery=function(e){var t=e.query,n=e.rootValue,r=e.contextValue,o=e.variableValues,a=e.fragmentMatcher,s=void 0===a?Ce:a,u=Object(i.l)(t),c=Object(i.j)(t),l={query:t,fragmentMap:Object(i.g)(c),contextValue:r,variableValues:o,fragmentMatcher:s};return this.executeSelectionSet({selectionSet:u.selectionSet,rootValue:n,execContext:l})},e.prototype.executeSelectionSet=function(e){var t=this,n=e.selectionSet,o=e.rootValue,a=e.execContext,s=a.fragmentMap,c=a.contextValue,l=a.variableValues,f={result:null},p=[],d=c.store.get(o.id),h=d&&d.__typename||"ROOT_QUERY"===o.id&&"Query"||void 0;function v(e){var t;return e.missing&&(f.missing=f.missing||[],(t=f.missing).push.apply(t,e.missing)),e.result}return n.selections.forEach((function(e){var n;if(Object(i.F)(e,l))if(Object(i.t)(e)){var f=v(t.executeField(d,h,e,a));void 0!==f&&p.push(((n={})[Object(i.E)(e)]=f,n))}else{var y=void 0;if(Object(i.v)(e))y=e;else if(!(y=s[e.name.value]))throw new u.a(9);var b=y.typeCondition&&y.typeCondition.name.value,m=!b||a.fragmentMatcher(o,b,c);if(m){var O=t.executeSelectionSet({selectionSet:y.selectionSet,rootValue:o,execContext:a});"heuristic"===m&&O.missing&&(O=Object(r.a)(Object(r.a)({},O),{missing:O.missing.map((function(e){return Object(r.a)(Object(r.a)({},e),{tolerable:!0})}))})),p.push(v(O))}}})),f.result=Object(i.B)(p),this.freezeResults,f},e.prototype.executeField=function(e,t,n,r){var o=r.variableValues,a=r.contextValue,s=function(e,t,n,r,o,a){a.resultKey;var s=a.directives,u=n;(r||s)&&(u=Object(i.p)(u,r,s));var c=void 0;if(e&&void 0===(c=e[u])&&o.cacheRedirects&&"string"==typeof t){var l=o.cacheRedirects[t];if(l){var f=l[n];f&&(c=f(e,r,{getCacheKey:function(e){var t=o.dataIdFromObject(e);return t&&Object(i.H)({id:t,typename:e.__typename})}}))}}if(void 0===c)return{result:c,missing:[{object:e,fieldName:u,tolerable:!1}]};Object(i.w)(c)&&(c=c.json);return{result:c}}(e,t,n.name.value,Object(i.b)(n,o),a,{resultKey:Object(i.E)(n),directives:Object(i.i)(n,o)});return Array.isArray(s.result)?this.combineExecResults(s,this.executeSubSelectedArray({field:n,array:s.result,execContext:r})):n.selectionSet?null==s.result?s:this.combineExecResults(s,this.executeSelectionSet({selectionSet:n.selectionSet,rootValue:s.result,execContext:r})):(Ae(n,s.result),this.freezeResults,s)},e.prototype.combineExecResults=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return t.forEach((function(t){t.missing&&(e=e||[]).push.apply(e,t.missing)})),{result:t.pop().result,missing:e}},e.prototype.executeSubSelectedArray=function(e){var t,n=this,r=e.field,i=e.array,o=e.execContext;function a(e){return e.missing&&(t=t||[]).push.apply(t,e.missing),e.result}return i=i.map((function(e){return null===e?null:Array.isArray(e)?a(n.executeSubSelectedArray({field:r,array:e,execContext:o})):r.selectionSet?a(n.executeSelectionSet({selectionSet:r.selectionSet,rootValue:e,execContext:o})):(Ae(r,e),e)})),this.freezeResults,{result:i,missing:t}},e}();function Ae(e,t){if(!e.selectionSet&&Object(i.u)(t))throw new u.a(10)}function Ce(){return!0}function Fe(e){Object(u.b)(Object(i.u)(e),11)}var Qe=function(){function e(e){void 0===e&&(e=Object.create(null)),this.data=e}return e.prototype.toObject=function(){return this.data},e.prototype.get=function(e){return this.data[e]},e.prototype.set=function(e,t){this.data[e]=t},e.prototype.delete=function(e){this.data[e]=void 0},e.prototype.clear=function(){this.data=Object.create(null)},e.prototype.replace=function(e){this.data=e||Object.create(null)},e}();function Me(e){return new Qe(e)}var Pe=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.type="WriteError",t}return Object(r.c)(t,e),t}(Error);function Le(e,t){var n=new Pe("Error writing result to store for query:\n "+JSON.stringify(t));return n.message+="\n"+e.message,n.stack=e.stack,n}var qe=function(){function e(){}return e.prototype.writeQueryToStore=function(e){var t=e.query,n=e.result,r=e.store,i=void 0===r?Re():r,o=e.variables,a=e.dataIdFromObject,s=e.fragmentMatcherFunction;return this.writeResultToStore({dataId:"ROOT_QUERY",result:n,document:t,store:i,variables:o,dataIdFromObject:a,fragmentMatcherFunction:s})},e.prototype.writeResultToStore=function(e){var t=e.dataId,n=e.result,r=e.document,o=e.store,a=void 0===o?Re():o,s=e.variables,u=e.dataIdFromObject,c=e.fragmentMatcherFunction,l=Object(i.m)(r);try{return this.writeSelectionSetToStore({result:n,dataId:t,selectionSet:l.selectionSet,context:{store:a,processedData:{},variables:Object(i.c)({},Object(i.h)(l),s),dataIdFromObject:u,fragmentMap:Object(i.g)(Object(i.j)(r)),fragmentMatcherFunction:c}})}catch(e){throw Le(e,r)}},e.prototype.writeSelectionSetToStore=function(e){var t=this,n=e.result,r=e.dataId,o=e.selectionSet,a=e.context,s=a.variables,c=a.store,l=a.fragmentMap;return o.selections.forEach((function(e){var o;if(Object(i.F)(e,s))if(Object(i.t)(e)){var c=Object(i.E)(e),f=n[c];if(void 0!==f)t.writeFieldToStore({dataId:r,value:f,field:e,context:a});else{var p=!1,d=!1;e.directives&&e.directives.length&&(p=e.directives.some((function(e){return e.name&&"defer"===e.name.value})),d=e.directives.some((function(e){return e.name&&"client"===e.name.value}))),!p&&!d&&a.fragmentMatcherFunction}}else{var h=void 0;Object(i.v)(e)?h=e:(h=(l||{})[e.name.value],Object(u.b)(h,3));var v=!0;if(a.fragmentMatcherFunction&&h.typeCondition){var y=r||"self",b=Object(i.H)({id:y,typename:void 0}),m={store:new Qe((o={},o[y]=n,o)),cacheRedirects:{}},O=a.fragmentMatcherFunction(b,h.typeCondition.name.value,m);Object(i.x)(),v=!!O}v&&t.writeSelectionSetToStore({result:n,selectionSet:h.selectionSet,dataId:r,context:a})}})),c},e.prototype.writeFieldToStore=function(e){var t,n,a,s=e.field,c=e.value,l=e.dataId,f=e.context,p=f.variables,d=f.dataIdFromObject,h=f.store,v=Object(i.G)(s,p);if(s.selectionSet&&null!==c)if(Array.isArray(c)){var y=l+"."+v;n=this.processArrayValue(c,y,s.selectionSet,f)}else{var b=l+"."+v,m=!0;if(Ke(b)||(b="$"+b),d){var O=d(c);Object(u.b)(!O||!Ke(O),4),(O||"number"==typeof O&&0===O)&&(b=O,m=!1)}Ve(b,s,f.processedData)||this.writeSelectionSetToStore({dataId:b,result:c,selectionSet:s.selectionSet,context:f});var g=c.__typename;n=Object(i.H)({id:b,typename:g},m);var k=(a=h.get(l))&&a[v];if(k!==n&&Object(i.u)(k)){var E=void 0!==k.typename,T=void 0!==g,w=E&&T&&k.typename!==g;Object(u.b)(!m||k.generated||w,5),Object(u.b)(!E||T,6),k.generated&&(w?m||h.delete(k.id):function e(t,n,a){if(t===n)return!1;var s=a.get(t),u=a.get(n),c=!1;Object.keys(s).forEach((function(t){var n=s[t],r=u[t];Object(i.u)(n)&&Ke(n.id)&&Object(i.u)(r)&&!Object(o.a)(n,r)&&e(n.id,r.id,a)&&(c=!0)})),a.delete(t);var l=Object(r.a)(Object(r.a)({},s),u);if(Object(o.a)(l,u))return c;return a.set(n,l),!0}(k.id,n.id,h))}}else n=null!=c&&"object"==typeof c?{type:"json",json:c}:c;(a=h.get(l))&&Object(o.a)(n,a[v])||h.set(l,Object(r.a)(Object(r.a)({},a),((t={})[v]=n,t)))},e.prototype.processArrayValue=function(e,t,n,r){var o=this;return e.map((function(e,a){if(null===e)return null;var s=t+"."+a;if(Array.isArray(e))return o.processArrayValue(e,s,n,r);var u=!0;if(r.dataIdFromObject){var c=r.dataIdFromObject(e);c&&(s=c,u=!1)}return Ve(s,n,r.processedData)||o.writeSelectionSetToStore({dataId:s,result:e,selectionSet:n,context:r}),Object(i.H)({id:s,typename:e.__typename},u)}))},e}();function Ke(e){return"$"===e[0]}function Ve(e,t,n){if(!n)return!1;if(n[e]){if(n[e].indexOf(t)>=0)return!0;n[e].push(t)}else n[e]=[t];return!1}var Be={fragmentMatcher:new je,dataIdFromObject:Ue,addTypename:!0,resultCaching:!0,freezeResults:!1};function Ue(e){if(e.__typename){if(void 0!==e.id)return e.__typename+":"+e.id;if(void 0!==e._id)return e.__typename+":"+e._id}return null}var Ge=Object.prototype.hasOwnProperty,Ye=function(e){function t(t,n,r){var i=e.call(this,Object.create(null))||this;return i.optimisticId=t,i.parent=n,i.transaction=r,i}return Object(r.c)(t,e),t.prototype.toObject=function(){return Object(r.a)(Object(r.a)({},this.parent.toObject()),this.data)},t.prototype.get=function(e){return Ge.call(this.data,e)?this.data[e]:this.parent.get(e)},t}(Qe),Je=function(e){function t(t){void 0===t&&(t={});var n=e.call(this)||this;n.watches=new Set,n.typenameDocumentCache=new Map,n.cacheKeyRoot=new ge(i.e),n.silenceBroadcast=!1,n.config=Object(r.a)(Object(r.a)({},Be),t),n.config.customResolvers&&(n.config.cacheRedirects=n.config.customResolvers),n.config.cacheResolvers&&(n.config.cacheRedirects=n.config.cacheResolvers),n.addTypename=!!n.config.addTypename,n.data=n.config.resultCaching?new Ne:new Qe,n.optimisticData=n.data,n.storeWriter=new qe,n.storeReader=new De({cacheKeyRoot:n.cacheKeyRoot,freezeResults:t.freezeResults});var o=n,a=o.maybeBroadcastWatch;return n.maybeBroadcastWatch=we((function(e){return a.call(n,e)}),{makeCacheKey:function(e){if(!e.optimistic&&!e.previousResult)return o.data instanceof Ne?o.cacheKeyRoot.lookup(e.query,JSON.stringify(e.variables)):void 0}}),n}return Object(r.c)(t,e),t.prototype.restore=function(e){return e&&this.data.replace(e),this},t.prototype.extract=function(e){return void 0===e&&(e=!1),(e?this.optimisticData:this.data).toObject()},t.prototype.read=function(e){if("string"==typeof e.rootId&&void 0===this.data.get(e.rootId))return null;var t=this.config.fragmentMatcher,n=t&&t.match;return this.storeReader.readQueryFromStore({store:e.optimistic?this.optimisticData:this.data,query:this.transformDocument(e.query),variables:e.variables,rootId:e.rootId,fragmentMatcherFunction:n,previousResult:e.previousResult,config:this.config})||null},t.prototype.write=function(e){var t=this.config.fragmentMatcher,n=t&&t.match;this.storeWriter.writeResultToStore({dataId:e.dataId,result:e.result,variables:e.variables,document:this.transformDocument(e.query),store:this.data,dataIdFromObject:this.config.dataIdFromObject,fragmentMatcherFunction:n}),this.broadcastWatches()},t.prototype.diff=function(e){var t=this.config.fragmentMatcher,n=t&&t.match;return this.storeReader.diffQueryAgainstStore({store:e.optimistic?this.optimisticData:this.data,query:this.transformDocument(e.query),variables:e.variables,returnPartialData:e.returnPartialData,previousResult:e.previousResult,fragmentMatcherFunction:n,config:this.config})},t.prototype.watch=function(e){var t=this;return this.watches.add(e),function(){t.watches.delete(e)}},t.prototype.evict=function(e){throw new u.a(7)},t.prototype.reset=function(){return this.data.clear(),this.broadcastWatches(),Promise.resolve()},t.prototype.removeOptimistic=function(e){for(var t=[],n=0,r=this.optimisticData;r instanceof Ye;)r.optimisticId===e?++n:t.push(r),r=r.parent;if(n>0){for(this.optimisticData=r;t.length>0;){var i=t.pop();this.performTransaction(i.transaction,i.optimisticId)}this.broadcastWatches()}},t.prototype.performTransaction=function(e,t){var n=this.data,r=this.silenceBroadcast;this.silenceBroadcast=!0,"string"==typeof t&&(this.data=this.optimisticData=new Ye(t,this.optimisticData,e));try{e(this)}finally{this.silenceBroadcast=r,this.data=n}this.broadcastWatches()},t.prototype.recordOptimisticTransaction=function(e,t){return this.performTransaction(e,t)},t.prototype.transformDocument=function(e){if(this.addTypename){var t=this.typenameDocumentCache.get(e);return t||(t=Object(i.a)(e),this.typenameDocumentCache.set(e,t),this.typenameDocumentCache.set(t,t)),t}return e},t.prototype.broadcastWatches=function(){var e=this;this.silenceBroadcast||this.watches.forEach((function(t){return e.maybeBroadcastWatch(t)}))},t.prototype.maybeBroadcastWatch=function(e){e.callback(this.diff({query:e.query,variables:e.variables,previousResult:e.previousResult&&e.previousResult(),optimistic:e.optimistic}))},t}(W),ze=n(20),We={http:{includeQuery:!0,includeExtensions:!1},headers:{accept:"*/*","content-type":"application/json"},options:{method:"POST"}},He=function(e,t,n){var r=new Error(n);throw r.name="ServerError",r.response=e,r.statusCode=e.status,r.result=t,r},Xe=function(e,t){var n;try{n=JSON.stringify(e)}catch(e){var r=new u.a(2);throw r.parseError=e,r}return n},$e=function(e){void 0===e&&(e={});var t=e.uri,n=void 0===t?"/graphql":t,i=e.fetch,o=e.includeExtensions,a=e.useGETForQueries,c=Object(r.e)(e,["uri","fetch","includeExtensions","useGETForQueries"]);!function(e){if(!e&&"undefined"==typeof fetch){throw"undefined"==typeof window&&"node-fetch",new u.a(1)}}(i),i||(i=fetch);var l={http:{includeExtensions:o},options:c.fetchOptions,credentials:c.credentials,headers:c.headers};return new k((function(e){var t=function(e,t){var n=e.getContext().uri;return n||("function"==typeof t?t(e):t||"/graphql")}(e,n),o=e.getContext(),u={};if(o.clientAwareness){var c=o.clientAwareness,f=c.name,p=c.version;f&&(u["apollographql-client-name"]=f),p&&(u["apollographql-client-version"]=p)}var h,v=Object(r.a)({},u,o.headers),y={http:o.http,options:o.fetchOptions,credentials:o.credentials,headers:v},b=function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var o=Object(r.a)({},t.options,{headers:t.headers,credentials:t.credentials}),a=t.http;n.forEach((function(e){o=Object(r.a)({},o,e.options,{headers:Object(r.a)({},o.headers,e.headers)}),e.credentials&&(o.credentials=e.credentials),a=Object(r.a)({},a,e.http)}));var s=e.operationName,u=e.extensions,c=e.variables,l=e.query,f={operationName:s,variables:c};return a.includeExtensions&&(f.extensions=u),a.includeQuery&&(f.query=Object(ze.print)(l)),{options:o,body:f}}(e,We,l,y),m=b.options,O=b.body;if(!m.signal){var g=function(){if("undefined"==typeof AbortController)return{controller:!1,signal:!1};var e=new AbortController;return{controller:e,signal:e.signal}}(),k=g.controller,E=g.signal;(h=k)&&(m.signal=E)}if(a&&!e.query.definitions.some((function(e){return"OperationDefinition"===e.kind&&"mutation"===e.operation}))&&(m.method="GET"),"GET"===m.method){var T=function(e,t){var n=[],r=function(e,t){n.push(e+"="+encodeURIComponent(t))};"query"in t&&r("query",t.query);t.operationName&&r("operationName",t.operationName);if(t.variables){var i=void 0;try{i=Xe(t.variables)}catch(e){return{parseError:e}}r("variables",i)}if(t.extensions){var o=void 0;try{o=Xe(t.extensions)}catch(e){return{parseError:e}}r("extensions",o)}var a="",s=e,u=e.indexOf("#");-1!==u&&(a=e.substr(u),s=e.substr(0,u));var c=-1===s.indexOf("?")?"?":"&";return{newURI:s+c+n.join("&")+a}}(t,O),w=T.newURI,S=T.parseError;if(S)return d(S);t=w}else try{m.body=Xe(O)}catch(S){return d(S)}return new s((function(n){var r;return i(t,m).then((function(t){return e.setContext({response:t}),t})).then((r=e,function(e){return e.text().then((function(t){try{return JSON.parse(t)}catch(r){var n=r;return n.name="ServerParseError",n.response=e,n.statusCode=e.status,n.bodyText=t,Promise.reject(n)}})).then((function(t){return e.status>=300&&He(e,t,"Response not successful: Received status code "+e.status),Array.isArray(t)||t.hasOwnProperty("data")||t.hasOwnProperty("errors")||He(e,t,"Server response was missing for query '"+(Array.isArray(r)?r.map((function(e){return e.operationName})):r.operationName)+"'."),t}))})).then((function(e){return n.next(e),n.complete(),e})).catch((function(e){"AbortError"!==e.name&&(e.result&&e.result.errors&&e.result.data&&n.next(e.result),n.error(e))})),function(){h&&h.abort()}}))}))};var Ze=function(e){function t(t){return e.call(this,$e(t).request)||this}return Object(r.c)(t,e),t}(k);function et(e){return new k((function(t,n){return new s((function(r){var i,o,a;try{i=n(t).subscribe({next:function(i){i.errors&&(a=e({graphQLErrors:i.errors,response:i,operation:t,forward:n}))?o=a.subscribe({next:r.next.bind(r),error:r.error.bind(r),complete:r.complete.bind(r)}):r.next(i)},error:function(i){(a=e({operation:t,networkError:i,graphQLErrors:i&&i.result&&i.result.errors,forward:n}))?o=a.subscribe({next:r.next.bind(r),error:r.error.bind(r),complete:r.complete.bind(r)}):r.error(i)},complete:function(){a||r.complete.bind(r)()}})}catch(i){e({networkError:i,operation:t,forward:n}),r.error(i)}return function(){i&&i.unsubscribe(),o&&i.unsubscribe()}}))}))}!function(e){function t(t){var n=e.call(this)||this;return n.link=et(t),n}Object(r.c)(t,e),t.prototype.request=function(e,t){return this.link.request(e,t)}}(k);var tt=n(5),nt=n.n(tt),rt=["request","uri","credentials","headers","fetch","fetchOptions","clientState","onError","cacheRedirects","cache","name","version","resolvers","typeDefs","fragmentMatcher"],it=function(e){function t(t){void 0===t&&(t={});t&&Object.keys(t).filter((function(e){return-1===rt.indexOf(e)})).length;var n=t.request,r=t.uri,i=t.credentials,o=t.headers,a=t.fetch,c=t.fetchOptions,l=t.clientState,f=t.cacheRedirects,p=t.onError,d=t.name,h=t.version,v=t.resolvers,y=t.typeDefs,b=t.fragmentMatcher,m=t.cache;Object(u.b)(!m||!f,1),m||(m=f?new Je({cacheRedirects:f}):new Je);var O=et(p||function(e){var t=e.graphQLErrors;e.networkError;t&&t.forEach((function(e){e.message,e.locations,e.path;return!0}))}),g=!!n&&new k((function(e,t){return new s((function(r){var i;return Promise.resolve(e).then((function(e){return n(e)})).then((function(){i=t(e).subscribe({next:r.next.bind(r),error:r.error.bind(r),complete:r.complete.bind(r)})})).catch(r.error.bind(r)),function(){i&&i.unsubscribe()}}))})),E=new Ze({uri:r||"/graphql",fetch:a,fetchOptions:c||{},credentials:i||"same-origin",headers:o||{}}),T=k.from([O,g,E].filter((function(e){return!!e}))),w=v,S=y,_=b;return l&&(l.defaults&&m.writeData({data:l.defaults}),w=l.resolvers,S=l.typeDefs,_=l.fragmentMatcher),e.call(this,{cache:m,link:T,name:d,version:h,resolvers:w,typeDefs:S,fragmentMatcher:_})||this}return Object(r.c)(t,e),t}(U);t.default=it}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,